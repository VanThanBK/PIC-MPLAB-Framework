

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Nov 01 07:57:50 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     
    41                           ; Version 1.42
    42                           ; Generated 13/04/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F877A Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0088                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135                           
   136                           	psect	idataBANK0
   137  0E42                     __pidataBANK0:	
   138                           
   139                           ;initializer for _Volt
   140  0E42  3400               	retlw	0
   141  0E43  3420               	retlw	32
   142  0E44  3441               	retlw	65
   143                           
   144                           	psect	strings
   145  0800                     __pstrings:	
   146  0800                     stringtab:	
   147  0800                     __stringtab:	
   148                           
   149                           ;	String table - string pointers are 1 byte each
   150  0800  1BFF               	btfsc	btemp+1,7
   151  0801  280A               	ljmp	stringcode
   152  0802  1383               	bcf	3,7
   153  0803  187F               	btfsc	btemp+1,0
   154  0804  1783               	bsf	3,7
   155  0805  0800               	movf	0,w
   156  0806  0A84               	incf	4,f
   157  0807  1903               	skipnz
   158  0808  0AFF               	incf	btemp+1,f
   159  0809  0008               	return
   160  080A                     stringcode:	
   161  080A                     stringdir:	
   162  080A  3008               	movlw	high stringdir
   163  080B  008A               	movwf	10
   164  080C  0804               	movf	4,w
   165  080D  0A84               	incf	4,f
   166  080E  0782               	addwf	2,f
   167  080F                     __stringbase:	
   168  080F  3400               	retlw	0
   169  0810                     __end_of__stringtab:	
   170  0810                     _dpowers:	
   171  0810  3401               	retlw	1
   172  0811  3400               	retlw	0
   173  0812  3400               	retlw	0
   174  0813  3400               	retlw	0
   175  0814  340A               	retlw	10
   176  0815  3400               	retlw	0
   177  0816  3400               	retlw	0
   178  0817  3400               	retlw	0
   179  0818  3464               	retlw	100
   180  0819  3400               	retlw	0
   181  081A  3400               	retlw	0
   182  081B  3400               	retlw	0
   183  081C  34E8               	retlw	232
   184  081D  3403               	retlw	3
   185  081E  3400               	retlw	0
   186  081F  3400               	retlw	0
   187  0820  3410               	retlw	16
   188  0821  3427               	retlw	39
   189  0822  3400               	retlw	0
   190  0823  3400               	retlw	0
   191  0824  34A0               	retlw	160
   192  0825  3486               	retlw	134
   193  0826  3401               	retlw	1
   194  0827  3400               	retlw	0
   195  0828  3440               	retlw	64
   196  0829  3442               	retlw	66
   197  082A  340F               	retlw	15
   198  082B  3400               	retlw	0
   199  082C  3480               	retlw	128
   200  082D  3496               	retlw	150
   201  082E  3498               	retlw	152
   202  082F  3400               	retlw	0
   203  0830  3400               	retlw	0
   204  0831  34E1               	retlw	225
   205  0832  34F5               	retlw	245
   206  0833  3405               	retlw	5
   207  0834  3400               	retlw	0
   208  0835  34CA               	retlw	202
   209  0836  349A               	retlw	154
   210  0837  343B               	retlw	59
   211  0838                     __end_of_dpowers:	
   212  0043                     _RD3	set	67
   213  0047                     _RD7	set	71
   214  0046                     _RD6	set	70
   215  0045                     _RD5	set	69
   216  0044                     _RD4	set	68
   217  0042                     _RD2	set	66
   218  0447                     _TRISD7	set	1095
   219  0446                     _TRISD6	set	1094
   220  0445                     _TRISD5	set	1093
   221  0444                     _TRISD4	set	1092
   222  0443                     _TRISD3	set	1091
   223  0442                     _TRISD2	set	1090
   224  0838                     STR_2:	
   225  0838  3456               	retlw	86	;'V'
   226  0839  346F               	retlw	111	;'o'
   227  083A  346C               	retlw	108	;'l'
   228  083B  3474               	retlw	116	;'t'
   229  083C  3420               	retlw	32	;' '
   230  083D  346D               	retlw	109	;'m'
   231  083E  3465               	retlw	101	;'e'
   232  083F  3474               	retlw	116	;'t'
   233  0840  3465               	retlw	101	;'e'
   234  0841  3472               	retlw	114	;'r'
   235  0842  3420               	retlw	32	;' '
   236  0843  3400               	retlw	0
   237  0844                     STR_5:	
   238  0844  3425               	retlw	37	;'%'
   239  0845  346C               	retlw	108	;'l'
   240  0846  3475               	retlw	117	;'u'
   241  0847  342E               	retlw	46	;'.'
   242  0848  3425               	retlw	37	;'%'
   243  0849  3436               	retlw	54	;'6'
   244  084A  342E               	retlw	46	;'.'
   245  084B  3436               	retlw	54	;'6'
   246  084C  346C               	retlw	108	;'l'
   247  084D  3475               	retlw	117	;'u'
   248  084E  3400               	retlw	0
   249  084F                     STR_3:	
   250  084F  3456               	retlw	86	;'V'
   251  0850  346F               	retlw	111	;'o'
   252  0851  346C               	retlw	108	;'l'
   253  0852  3474               	retlw	116	;'t'
   254  0853  3461               	retlw	97	;'a'
   255  0854  3467               	retlw	103	;'g'
   256  0855  3465               	retlw	101	;'e'
   257  0856  343A               	retlw	58	;':'
   258  0857  3400               	retlw	0
   259  0858                     STR_1:	
   260  0858  3425               	retlw	37	;'%'
   261  0859  3464               	retlw	100	;'d'
   262  085A  3400               	retlw	0
   263  085B                     STR_4:	
   264  085B  3456               	retlw	86	;'V'
   265  085C  3400               	retlw	0
   266                           
   267                           ; #config settings
   268  0000                     
   269                           	psect	cinit
   270  07E1                     start_initialization:	
   271  07E1                     __initialization:	
   272                           
   273                           ; Initialize objects allocated to BANK0
   274  07E1  120A  158A  2642  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   275  07E6  00E2               	movwf	__pdataBANK0& (0+127)
   276  07E7  120A  158A  2643  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   277  07EC  00E3               	movwf	(__pdataBANK0+1)& (0+127)
   278  07ED  120A  158A  2644  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   279  07F2  00E4               	movwf	(__pdataBANK0+2)& (0+127)
   280                           
   281                           ; Clear objects allocated to BANK1
   282  07F3  1383               	bcf	3,7	;select IRP bank0
   283  07F4  30A0               	movlw	low __pbssBANK1
   284  07F5  0084               	movwf	4
   285  07F6  30B1               	movlw	low (__pbssBANK1+17)
   286  07F7  120A  158A  2658   	fcall	clear_ram0
   287                           
   288                           ; Clear objects allocated to BANK0
   289  07FA  01E5               	clrf	__pbssBANK0& (0+127)
   290  07FB  01E6               	clrf	(__pbssBANK0+1)& (0+127)
   291  07FC                     end_of_initialization:	
   292                           ;End of C runtime variable initialization code
   293                           
   294  07FC                     __end_of__initialization:	
   295  07FC  0183               	clrf	3
   296  07FD  120A  118A  2884   	ljmp	_main	;jump to C main() function
   297                           
   298                           	psect	bssBANK0
   299  0065                     __pbssBANK0:	
   300  0065                     _adc:	
   301  0065                     	ds	2
   302                           
   303                           	psect	dataBANK0
   304  0062                     __pdataBANK0:	
   305  0062                     _Volt:	
   306  0062                     	ds	3
   307                           
   308                           	psect	bssBANK1
   309  00A0                     __pbssBANK1:	
   310  00A0                     ftoa@buf:	
   311  00A0                     	ds	17
   312                           
   313                           	psect	clrtext
   314  0E58                     clear_ram0:	
   315                           ;	Called with FSR containing the base address, and
   316                           ;	W with the last address+1
   317                           
   318  0E58  0064               	clrwdt	;clear the watchdog before getting into this loop
   319  0E59                     clrloop0:	
   320  0E59  0180               	clrf	0	;clear RAM location pointed to by FSR
   321  0E5A  0A84               	incf	4,f	;increment pointer
   322  0E5B  0604               	xorwf	4,w	;XOR with final address
   323  0E5C  1903               	btfsc	3,2	;have we reached the end yet?
   324  0E5D  3400               	retlw	0	;all done for this memory range, return
   325  0E5E  0604               	xorwf	4,w	;XOR again to restore value
   326  0E5F  2E59               	goto	clrloop0	;do the next byte
   327                           
   328                           	psect	cstackCOMMON
   329  0070                     __pcstackCOMMON:	
   330  0070                     ?_isdigit:	
   331  0070                     ?___ftge:	
   332                           ; 1 bit 
   333                           
   334  0070                     ?_LCDMode4Bit:	
   335                           ; 1 bit 
   336                           
   337  0070                     ?_LCDWriteCommand:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_LCDLatchData:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ??_LCDLatchData:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ??_isdigit:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_LCDInit:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_LCDWriteByte:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_LCDWriteData:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_LCDClear:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_LCDPutChar:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_main:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?___wmul:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?___ftpack:	
   371                           ; 2 bytes @ 0x0
   372                           
   373  0070                     ?___ftneg:	
   374                           ; 3 bytes @ 0x0
   375                           
   376  0070                     ?___lldiv:	
   377                           ; 3 bytes @ 0x0
   378                           
   379  0070                     _isdigit$342:	
   380                           ; 4 bytes @ 0x0
   381                           
   382  0070                     ___wmul@multiplier:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ___ftpack@arg:	
   386                           ; 2 bytes @ 0x0
   387                           
   388  0070                     ___ftge@ff1:	
   389                           ; 3 bytes @ 0x0
   390                           
   391  0070                     ___ftneg@f1:	
   392                           ; 3 bytes @ 0x0
   393                           
   394  0070                     ___lldiv@divisor:	
   395                           ; 3 bytes @ 0x0
   396                           
   397                           
   398                           ; 4 bytes @ 0x0
   399  0070                     	ds	1
   400  0071                     isdigit@c:	
   401                           
   402                           ; 1 bytes @ 0x1
   403  0071                     	ds	1
   404  0072                     ??_LCDMode4Bit:	
   405  0072                     ??_LCDWriteByte:	
   406                           ; 1 bytes @ 0x2
   407                           
   408  0072                     ___wmul@multiplicand:	
   409                           ; 1 bytes @ 0x2
   410                           
   411                           
   412                           ; 2 bytes @ 0x2
   413  0072                     	ds	1
   414  0073                     ??___ftneg:	
   415  0073                     LCDWriteByte@ch:	
   416                           ; 1 bytes @ 0x3
   417                           
   418  0073                     ___ftpack@exp:	
   419                           ; 1 bytes @ 0x3
   420                           
   421  0073                     ___ftge@ff2:	
   422                           ; 1 bytes @ 0x3
   423                           
   424                           
   425                           ; 3 bytes @ 0x3
   426  0073                     	ds	1
   427  0074                     ??_LCDWriteCommand:	
   428  0074                     ??_LCDWriteData:	
   429                           ; 1 bytes @ 0x4
   430                           
   431  0074                     ??___wmul:	
   432                           ; 1 bytes @ 0x4
   433                           
   434  0074                     LCDWriteData@dt:	
   435                           ; 1 bytes @ 0x4
   436                           
   437  0074                     LCDWriteCommand@dt:	
   438                           ; 1 bytes @ 0x4
   439                           
   440  0074                     ___ftpack@sign:	
   441                           ; 1 bytes @ 0x4
   442                           
   443  0074                     ___wmul@product:	
   444                           ; 1 bytes @ 0x4
   445                           
   446  0074                     ___lldiv@dividend:	
   447                           ; 2 bytes @ 0x4
   448                           
   449                           
   450                           ; 4 bytes @ 0x4
   451  0074                     	ds	1
   452  0075                     ??___ftpack:	
   453  0075                     ??_LCDInit:	
   454                           ; 1 bytes @ 0x5
   455                           
   456  0075                     ??_LCDClear:	
   457                           ; 1 bytes @ 0x5
   458                           
   459  0075                     ?_LCDMove:	
   460                           ; 1 bytes @ 0x5
   461                           
   462  0075                     ??_LCDPutChar:	
   463                           ; 1 bytes @ 0x5
   464                           
   465  0075                     LCDMove@x:	
   466                           ; 1 bytes @ 0x5
   467                           
   468  0075                     LCDPutChar@ch:	
   469                           ; 1 bytes @ 0x5
   470                           
   471                           
   472                           ; 1 bytes @ 0x5
   473  0075                     	ds	1
   474  0076                     ??_LCDMove:	
   475  0076                     ??___ftge:	
   476                           ; 1 bytes @ 0x6
   477                           
   478                           
   479                           ; 1 bytes @ 0x6
   480  0076                     	ds	2
   481  0078                     ??___lldiv:	
   482  0078                     ?___ftadd:	
   483                           ; 1 bytes @ 0x8
   484                           
   485  0078                     ?___ftmul:	
   486                           ; 3 bytes @ 0x8
   487                           
   488  0078                     ?___lltoft:	
   489                           ; 3 bytes @ 0x8
   490                           
   491  0078                     ___ftadd@f1:	
   492                           ; 3 bytes @ 0x8
   493                           
   494  0078                     ___ftmul@f1:	
   495                           ; 3 bytes @ 0x8
   496                           
   497  0078                     ___lltoft@c:	
   498                           ; 3 bytes @ 0x8
   499                           
   500                           
   501                           ; 4 bytes @ 0x8
   502  0078                     	ds	1
   503  0079                     ___lldiv@quotient:	
   504                           
   505                           ; 4 bytes @ 0x9
   506  0079                     	ds	1
   507  007A                     LCDMove@Ad:	
   508                           
   509                           ; 2 bytes @ 0xA
   510  007A                     	ds	1
   511  007B                     ___ftadd@f2:	
   512  007B                     ___ftmul@f2:	
   513                           ; 3 bytes @ 0xB
   514                           
   515                           
   516                           ; 3 bytes @ 0xB
   517  007B                     	ds	1
   518  007C                     ??___lltoft:	
   519  007C                     LCDMove@y:	
   520                           ; 1 bytes @ 0xC
   521                           
   522                           
   523                           ; 1 bytes @ 0xC
   524  007C                     	ds	1
   525  007D                     ??_LCDPrint:	
   526  007D                     ___lldiv@counter:	
   527                           ; 1 bytes @ 0xD
   528                           
   529  007D                     ___lltoft@exp:	
   530                           ; 1 bytes @ 0xD
   531                           
   532                           
   533                           ; 1 bytes @ 0xD
   534  007D                     	ds	1
   535  007E                     ??___ftsub:	
   536                           
   537                           	psect	cstackBANK0
   538  0020                     __pcstackBANK0:	
   539                           ; 1 bytes @ 0xE
   540                           
   541  0020                     ?_LCDPrint:	
   542  0020                     ??___ftadd:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0020                     ??___ftmul:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0020                     ?___llmod:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0020                     LCDPrint@x:	
   552                           ; 4 bytes @ 0x0
   553                           
   554  0020                     ___llmod@divisor:	
   555                           ; 1 bytes @ 0x0
   556                           
   557                           
   558                           ; 4 bytes @ 0x0
   559  0020                     	ds	1
   560  0021                     LCDPrint@str:	
   561                           
   562                           ; 2 bytes @ 0x1
   563  0021                     	ds	2
   564  0023                     LCDPrint@y:	
   565                           
   566                           ; 1 bytes @ 0x3
   567  0023                     	ds	1
   568  0024                     ___ftadd@sign:	
   569  0024                     ___ftmul@exp:	
   570                           ; 1 bytes @ 0x4
   571                           
   572  0024                     ___llmod@dividend:	
   573                           ; 1 bytes @ 0x4
   574                           
   575                           
   576                           ; 4 bytes @ 0x4
   577  0024                     	ds	1
   578  0025                     ___ftadd@exp2:	
   579  0025                     ___ftmul@f3_as_product:	
   580                           ; 1 bytes @ 0x5
   581                           
   582                           
   583                           ; 3 bytes @ 0x5
   584  0025                     	ds	1
   585  0026                     ___ftadd@exp1:	
   586                           
   587                           ; 1 bytes @ 0x6
   588  0026                     	ds	1
   589  0027                     ?___ftsub:	
   590  0027                     ___ftsub@f2:	
   591                           ; 3 bytes @ 0x7
   592                           
   593                           
   594                           ; 3 bytes @ 0x7
   595  0027                     	ds	1
   596  0028                     ??___llmod:	
   597  0028                     ___ftmul@cntr:	
   598                           ; 1 bytes @ 0x8
   599                           
   600                           
   601                           ; 1 bytes @ 0x8
   602  0028                     	ds	1
   603  0029                     ___ftmul@sign:	
   604  0029                     ___llmod@counter:	
   605                           ; 1 bytes @ 0x9
   606                           
   607                           
   608                           ; 1 bytes @ 0x9
   609  0029                     	ds	1
   610  002A                     ?_sprintf:	
   611  002A                     ?___fttol:	
   612                           ; 2 bytes @ 0xA
   613                           
   614  002A                     sprintf@f:	
   615                           ; 4 bytes @ 0xA
   616                           
   617  002A                     ___ftsub@f1:	
   618                           ; 1 bytes @ 0xA
   619                           
   620  002A                     ___fttol@f1:	
   621                           ; 3 bytes @ 0xA
   622                           
   623                           
   624                           ; 3 bytes @ 0xA
   625  002A                     	ds	4
   626  002E                     ??___fttol:	
   627                           
   628                           ; 1 bytes @ 0xE
   629  002E                     	ds	4
   630  0032                     ___fttol@sign1:	
   631                           
   632                           ; 1 bytes @ 0x12
   633  0032                     	ds	1
   634  0033                     ??_sprintf:	
   635  0033                     ___fttol@lval:	
   636                           ; 1 bytes @ 0x13
   637                           
   638                           
   639                           ; 4 bytes @ 0x13
   640  0033                     	ds	4
   641  0037                     ___fttol@exp1:	
   642                           
   643                           ; 1 bytes @ 0x17
   644  0037                     	ds	1
   645  0038                     sprintf@ap:	
   646                           
   647                           ; 1 bytes @ 0x18
   648  0038                     	ds	1
   649  0039                     sprintf@val:	
   650                           
   651                           ; 4 bytes @ 0x19
   652  0039                     	ds	4
   653  003D                     sprintf@flag:	
   654                           
   655                           ; 1 bytes @ 0x1D
   656  003D                     	ds	1
   657  003E                     sprintf@sp:	
   658                           
   659                           ; 1 bytes @ 0x1E
   660  003E                     	ds	1
   661  003F                     sprintf@width:	
   662                           
   663                           ; 2 bytes @ 0x1F
   664  003F                     	ds	2
   665  0041                     sprintf@prec:	
   666                           
   667                           ; 2 bytes @ 0x21
   668  0041                     	ds	2
   669  0043                     sprintf@c:	
   670                           
   671                           ; 1 bytes @ 0x23
   672  0043                     	ds	1
   673  0044                     ?_ftoa:	
   674  0044                     ftoa@f:	
   675                           ; 1 bytes @ 0x24
   676                           
   677                           
   678                           ; 3 bytes @ 0x24
   679  0044                     	ds	3
   680  0047                     ftoa@status:	
   681                           
   682                           ; 2 bytes @ 0x27
   683  0047                     	ds	2
   684  0049                     ??_ftoa:	
   685                           
   686                           ; 1 bytes @ 0x29
   687  0049                     	ds	1
   688  004A                     ftoa@rem:	
   689                           
   690                           ; 4 bytes @ 0x2A
   691  004A                     	ds	4
   692  004E                     ftoa@l:	
   693                           
   694                           ; 4 bytes @ 0x2E
   695  004E                     	ds	4
   696  0052                     ftoa@cp:	
   697                           
   698                           ; 1 bytes @ 0x32
   699  0052                     	ds	1
   700  0053                     ?_LCDPrintFNumber:	
   701  0053                     LCDPrintFNumber@x:	
   702                           ; 1 bytes @ 0x33
   703                           
   704                           
   705                           ; 1 bytes @ 0x33
   706  0053                     	ds	1
   707  0054                     LCDPrintFNumber@fnum:	
   708                           
   709                           ; 3 bytes @ 0x34
   710  0054                     	ds	3
   711  0057                     LCDPrintFNumber@f:	
   712                           
   713                           ; 1 bytes @ 0x37
   714  0057                     	ds	1
   715  0058                     ??_LCDPrintFNumber:	
   716                           
   717                           ; 1 bytes @ 0x38
   718  0058                     	ds	2
   719  005A                     LCDPrintFNumber@status:	
   720                           
   721                           ; 2 bytes @ 0x3A
   722  005A                     	ds	2
   723  005C                     LCDPrintFNumber@y:	
   724                           
   725                           ; 1 bytes @ 0x3C
   726  005C                     	ds	1
   727  005D                     LCDPrintFNumber@str:	
   728                           
   729                           ; 1 bytes @ 0x3D
   730  005D                     	ds	1
   731  005E                     LCDPrintFNumber@i:	
   732                           
   733                           ; 1 bytes @ 0x3E
   734  005E                     	ds	1
   735  005F                     ??_main:	
   736                           
   737                           ; 1 bytes @ 0x3F
   738  005F                     	ds	3
   739                           
   740                           	psect	maintext
   741  0084                     __pmaintext:	
   742 ;;
   743 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   744 ;;
   745 ;; *************** function _main *****************
   746 ;; Defined at:
   747 ;;		line 35 in file "ADC_Demo.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;		None
   750 ;; Auto vars:     Size  Location     Type
   751 ;;		None
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : B00/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   761 ;;      Params:         0       0       0       0       0
   762 ;;      Locals:         0       0       0       0       0
   763 ;;      Temps:          0       3       0       0       0
   764 ;;      Totals:         0       3       0       0       0
   765 ;;Total ram usage:        3 bytes
   766 ;; Hardware stack levels required when called:    6
   767 ;; This function calls:
   768 ;;		_LCDClear
   769 ;;		_LCDInit
   770 ;;		_LCDPrint
   771 ;;		_LCDPrintFNumber
   772 ;; This function is called by:
   773 ;;		Startup code after reset
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           
   778                           ;psect for function _main
   779  0084                     _main:	
   780                           
   781                           ;ADC_Demo.c: 36: _delay((unsigned long)((200)*(4000000/4000.0)));
   782                           
   783                           ;incstack = 0
   784                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   785  0084  3002               	movlw	2
   786  0085  1283               	bcf	3,5	;RP0=0, select bank0
   787  0086  1303               	bcf	3,6	;RP1=0, select bank0
   788  0087  00E1               	movwf	??_main+2
   789  0088  3004               	movlw	4
   790  0089  00E0               	movwf	??_main+1
   791  008A  30B9               	movlw	185
   792  008B  00DF               	movwf	??_main
   793  008C                     u2917:	
   794  008C  0BDF               	decfsz	??_main,f
   795  008D  288C               	goto	u2917
   796  008E  0BE0               	decfsz	??_main+1,f
   797  008F  288C               	goto	u2917
   798  0090  0BE1               	decfsz	??_main+2,f
   799  0091  288C               	goto	u2917
   800  0092  2893               	nop2
   801                           
   802                           ;ADC_Demo.c: 37: LCDInit();
   803  0093  120A  158A  2699  120A  118A  	fcall	_LCDInit
   804                           
   805                           ;ADC_Demo.c: 38: LCDClear();
   806  0098  120A  158A  2645  120A  118A  	fcall	_LCDClear
   807                           
   808                           ;ADC_Demo.c: 40: LCDPrint(1,4,"Volt meter ");
   809  009D  3004               	movlw	4
   810  009E  1283               	bcf	3,5	;RP0=0, select bank0
   811  009F  1303               	bcf	3,6	;RP1=0, select bank0
   812  00A0  00DF               	movwf	??_main
   813  00A1  085F               	movf	??_main,w
   814  00A2  00A0               	movwf	LCDPrint@x
   815  00A3  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   816  00A4  00A1               	movwf	LCDPrint@str
   817  00A5  3080               	movlw	128
   818  00A6  00A2               	movwf	LCDPrint@str+1
   819  00A7  3001               	movlw	1
   820  00A8  120A  158A  2723  120A  118A  	fcall	_LCDPrint
   821                           
   822                           ;ADC_Demo.c: 41: LCDPrint(2,1,"Voltage:");
   823  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   824  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   825  00AF  01A0               	clrf	LCDPrint@x
   826  00B0  0AA0               	incf	LCDPrint@x,f
   827  00B1  3040               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   828  00B2  00A1               	movwf	LCDPrint@str
   829  00B3  3080               	movlw	128
   830  00B4  00A2               	movwf	LCDPrint@str+1
   831  00B5  3002               	movlw	2
   832  00B6  120A  158A  2723  120A  118A  	fcall	_LCDPrint
   833                           
   834                           ;ADC_Demo.c: 42: LCDPrint(2,16,"V");
   835  00BB  3010               	movlw	16
   836  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   837  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   838  00BE  00DF               	movwf	??_main
   839  00BF  085F               	movf	??_main,w
   840  00C0  00A0               	movwf	LCDPrint@x
   841  00C1  304C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   842  00C2  00A1               	movwf	LCDPrint@str
   843  00C3  3080               	movlw	128
   844  00C4  00A2               	movwf	LCDPrint@str+1
   845  00C5  3002               	movlw	2
   846  00C6  120A  158A  2723  120A  118A  	fcall	_LCDPrint
   847  00CB                     l1768:	
   848                           ;ADC_Demo.c: 43: while(1){
   849                           
   850                           
   851                           ;ADC_Demo.c: 46: LCDPrintFNumber(2,10,Volt,2);
   852  00CB  300A               	movlw	10
   853  00CC  1283               	bcf	3,5	;RP0=0, select bank0
   854  00CD  1303               	bcf	3,6	;RP1=0, select bank0
   855  00CE  00DF               	movwf	??_main
   856  00CF  085F               	movf	??_main,w
   857  00D0  00D3               	movwf	LCDPrintFNumber@x
   858  00D1  0862               	movf	_Volt,w
   859  00D2  00D4               	movwf	LCDPrintFNumber@fnum
   860  00D3  0863               	movf	_Volt+1,w
   861  00D4  00D5               	movwf	LCDPrintFNumber@fnum+1
   862  00D5  0864               	movf	_Volt+2,w
   863  00D6  00D6               	movwf	LCDPrintFNumber@fnum+2
   864  00D7  3002               	movlw	2
   865  00D8  00E0               	movwf	??_main+1
   866  00D9  0860               	movf	??_main+1,w
   867  00DA  00D7               	movwf	LCDPrintFNumber@f
   868  00DB  3002               	movlw	2
   869  00DC  120A  118A  20E2  120A  118A  	fcall	_LCDPrintFNumber
   870  00E1  28CB               	goto	l1768
   871  00E2                     __end_of_main:	
   872                           ;ADC_Demo.c: 48: }
   873                           ;ADC_Demo.c: 49: return;
   874                           
   875                           
   876                           	psect	text1
   877  00E2                     __ptext1:	
   878 ;; *************** function _LCDPrintFNumber *****************
   879 ;; Defined at:
   880 ;;		line 99 in file "D:\PIC_MPlap\LCD\MyLCD.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  y               1    wreg     unsigned char 
   883 ;;  x               1   51[BANK0 ] unsigned char 
   884 ;;  fnum            3   52[BANK0 ] float 
   885 ;;  f               1   55[BANK0 ] unsigned char 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  y               1   60[BANK0 ] unsigned char 
   888 ;;  status          2   58[BANK0 ] int 
   889 ;;  i               1   62[BANK0 ] unsigned char 
   890 ;;  str             1   61[BANK0 ] PTR unsigned char 
   891 ;;		 -> ftoa@buf(17), 
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   901 ;;      Params:         0       5       0       0       0
   902 ;;      Locals:         0       5       0       0       0
   903 ;;      Temps:          0       2       0       0       0
   904 ;;      Totals:         0      12       0       0       0
   905 ;;Total ram usage:       12 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    5
   908 ;; This function calls:
   909 ;;		_LCDPrint
   910 ;;		_ftoa
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _LCDPrintFNumber
   918  00E2                     _LCDPrintFNumber:	
   919                           
   920                           ;incstack = 0
   921                           ; Regs used in _LCDPrintFNumber: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   922                           ;LCDPrintFNumber@y stored from wreg
   923  00E2  1283               	bcf	3,5	;RP0=0, select bank0
   924  00E3  1303               	bcf	3,6	;RP1=0, select bank0
   925  00E4  00DC               	movwf	LCDPrintFNumber@y
   926                           
   927                           ;MyLCD.c: 100: char i;
   928                           ;MyLCD.c: 101: char *str;
   929                           ;MyLCD.c: 103: int status=0;
   930  00E5  01DA               	clrf	LCDPrintFNumber@status
   931  00E6  01DB               	clrf	LCDPrintFNumber@status+1
   932                           
   933                           ;MyLCD.c: 104: str = ftoa(fnum, status);
   934  00E7  0854               	movf	LCDPrintFNumber@fnum,w
   935  00E8  00C4               	movwf	ftoa@f
   936  00E9  0855               	movf	LCDPrintFNumber@fnum+1,w
   937  00EA  00C5               	movwf	ftoa@f+1
   938  00EB  0856               	movf	LCDPrintFNumber@fnum+2,w
   939  00EC  00C6               	movwf	ftoa@f+2
   940  00ED  085A               	movf	LCDPrintFNumber@status,w
   941  00EE  00C7               	movwf	ftoa@status
   942  00EF  085B               	movf	LCDPrintFNumber@status+1,w
   943  00F0  00C8               	movwf	ftoa@status+1
   944  00F1  120A  118A  22C8  120A  118A  	fcall	_ftoa
   945  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   946  00F7  1303               	bcf	3,6	;RP1=0, select bank0
   947  00F8  00D8               	movwf	??_LCDPrintFNumber
   948  00F9  0858               	movf	??_LCDPrintFNumber,w
   949  00FA  00DD               	movwf	LCDPrintFNumber@str
   950                           
   951                           ;MyLCD.c: 106: for(i=0;i<15;i++){
   952  00FB  01DE               	clrf	LCDPrintFNumber@i
   953  00FC  300F               	movlw	15
   954  00FD  025E               	subwf	LCDPrintFNumber@i,w
   955  00FE  1803               	btfsc	3,0
   956  00FF  2912               	goto	l1738
   957  0100                     l1730:	
   958                           
   959                           ;MyLCD.c: 107: if(str[i] == '.') break;
   960  0100  085E               	movf	LCDPrintFNumber@i,w
   961  0101  075D               	addwf	LCDPrintFNumber@str,w
   962  0102  00D8               	movwf	??_LCDPrintFNumber
   963  0103  0858               	movf	??_LCDPrintFNumber,w
   964  0104  0084               	movwf	4
   965  0105  302E               	movlw	46
   966  0106  1383               	bcf	3,7	;select IRP bank0
   967  0107  0600               	xorwf	0,w
   968  0108  1903               	btfsc	3,2
   969  0109  2912               	goto	l1738
   970  010A  3001               	movlw	1
   971  010B  00D8               	movwf	??_LCDPrintFNumber
   972  010C  0858               	movf	??_LCDPrintFNumber,w
   973  010D  07DE               	addwf	LCDPrintFNumber@i,f
   974  010E  300F               	movlw	15
   975  010F  025E               	subwf	LCDPrintFNumber@i,w
   976  0110  1C03               	skipc
   977  0111  2900               	goto	l1730
   978  0112                     l1738:	
   979                           
   980                           ;MyLCD.c: 108: }
   981                           ;MyLCD.c: 109: i = (i+f+1);
   982  0112  0857               	movf	LCDPrintFNumber@f,w
   983  0113  075E               	addwf	LCDPrintFNumber@i,w
   984  0114  3E01               	addlw	1
   985  0115  00D8               	movwf	??_LCDPrintFNumber
   986  0116  0858               	movf	??_LCDPrintFNumber,w
   987  0117  00DE               	movwf	LCDPrintFNumber@i
   988                           
   989                           ;MyLCD.c: 110: str[i] = ' ';
   990  0118  3020               	movlw	32
   991  0119  00D8               	movwf	??_LCDPrintFNumber
   992  011A  085E               	movf	LCDPrintFNumber@i,w
   993  011B  075D               	addwf	LCDPrintFNumber@str,w
   994  011C  00D9               	movwf	??_LCDPrintFNumber+1
   995  011D  0859               	movf	??_LCDPrintFNumber+1,w
   996  011E  0084               	movwf	4
   997  011F  0858               	movf	??_LCDPrintFNumber,w
   998  0120  1383               	bcf	3,7	;select IRP bank0
   999  0121                     L1:	
  1000  0121  0080               	movwf	0
  1001                           
  1002                           ;MyLCD.c: 114: i++;
  1003  0122  3001               	movlw	1
  1004  0123  00D8               	movwf	??_LCDPrintFNumber
  1005  0124  0858               	movf	??_LCDPrintFNumber,w
  1006  0125  07DE               	addwf	LCDPrintFNumber@i,f
  1007  0126  085E               	movf	LCDPrintFNumber@i,w
  1008  0127  075D               	addwf	LCDPrintFNumber@str,w
  1009  0128  00D8               	movwf	??_LCDPrintFNumber
  1010  0129  0858               	movf	??_LCDPrintFNumber,w
  1011  012A  0084               	movwf	4
  1012  012B  0800               	movf	0,w
  1013  012C  1903               	btfsc	3,2
  1014  012D  2937               	goto	l1750
  1015                           
  1016                           ;MyLCD.c: 113: str[i] = ' ';
  1017                           
  1018                           ;MyLCD.c: 112: while(str[i]){
  1019                           
  1020                           ;MyLCD.c: 111: i++;
  1021  012E  3020               	movlw	32
  1022  012F  00D8               	movwf	??_LCDPrintFNumber
  1023  0130  085E               	movf	LCDPrintFNumber@i,w
  1024  0131  075D               	addwf	LCDPrintFNumber@str,w
  1025  0132  00D9               	movwf	??_LCDPrintFNumber+1
  1026  0133  0859               	movf	??_LCDPrintFNumber+1,w
  1027  0134  0084               	movwf	4
  1028  0135  0858               	movf	??_LCDPrintFNumber,w
  1029  0136  2921               	goto	L1
  1030  0137                     l1750:	
  1031                           
  1032                           ;MyLCD.c: 115: }
  1033                           ;MyLCD.c: 116: LCDPrint(y,x,str);
  1034  0137  0853               	movf	LCDPrintFNumber@x,w
  1035  0138  00D8               	movwf	??_LCDPrintFNumber
  1036  0139  0858               	movf	??_LCDPrintFNumber,w
  1037  013A  00A0               	movwf	LCDPrint@x
  1038  013B  085D               	movf	LCDPrintFNumber@str,w
  1039  013C  00A1               	movwf	LCDPrint@str
  1040  013D  3000               	movlw	0
  1041  013E  00A2               	movwf	LCDPrint@str+1
  1042  013F  085C               	movf	LCDPrintFNumber@y,w
  1043  0140  120A  158A  2723   	fcall	_LCDPrint
  1044  0143  0008               	return
  1045  0144                     __end_of_LCDPrintFNumber:	
  1046                           
  1047                           	psect	text2
  1048  02C8                     __ptext2:	
  1049 ;; *************** function _ftoa *****************
  1050 ;; Defined at:
  1051 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftoa.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  f               3   36[BANK0 ] float 
  1054 ;;  status          2   39[BANK0 ] PTR int 
  1055 ;;		 -> RAM(512), 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  l               4   46[BANK0 ] unsigned long 
  1058 ;;  rem             4   42[BANK0 ] unsigned long 
  1059 ;;  cp              1   50[BANK0 ] PTR unsigned char 
  1060 ;;		 -> ftoa@buf(17), 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      PTR unsigned char 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1070 ;;      Params:         0       5       0       0       0
  1071 ;;      Locals:         0       9       0       0       0
  1072 ;;      Temps:          0       1       0       0       0
  1073 ;;      Totals:         0      15       0       0       0
  1074 ;;Total ram usage:       15 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    3
  1077 ;; This function calls:
  1078 ;;		___ftge
  1079 ;;		___ftmul
  1080 ;;		___ftneg
  1081 ;;		___ftsub
  1082 ;;		___fttol
  1083 ;;		___lltoft
  1084 ;;		_sprintf
  1085 ;; This function is called by:
  1086 ;;		_LCDPrintFNumber
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           
  1091                           ;psect for function _ftoa
  1092  02C8                     _ftoa:	
  1093                           
  1094                           ;incstack = 0
  1095                           ; Regs used in _ftoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1096  02C8  30A0               	movlw	(low (ftoa@buf| 0))& (0+255)
  1097  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1098  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  1099  02CB  00C9               	movwf	??_ftoa
  1100  02CC  0849               	movf	??_ftoa,w
  1101  02CD  00D2               	movwf	ftoa@cp
  1102  02CE  0844               	movf	ftoa@f,w
  1103  02CF  00F0               	movwf	___ftge@ff1
  1104  02D0  0845               	movf	ftoa@f+1,w
  1105  02D1  00F1               	movwf	___ftge@ff1+1
  1106  02D2  0846               	movf	ftoa@f+2,w
  1107  02D3  00F2               	movwf	___ftge@ff1+2
  1108  02D4  3000               	movlw	0
  1109  02D5  00F3               	movwf	___ftge@ff2
  1110  02D6  3000               	movlw	0
  1111  02D7  00F4               	movwf	___ftge@ff2+1
  1112  02D8  3000               	movlw	0
  1113  02D9  00F5               	movwf	___ftge@ff2+2
  1114  02DA  120A  158A  27A3  120A  118A  	fcall	___ftge
  1115  02DF  1803               	btfsc	3,0
  1116  02E0  2B01               	goto	l1702
  1117  02E1  302D               	movlw	45
  1118  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  1119  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  1120  02E4  00C9               	movwf	??_ftoa
  1121  02E5  0852               	movf	ftoa@cp,w
  1122  02E6  0084               	movwf	4
  1123  02E7  0849               	movf	??_ftoa,w
  1124  02E8  1383               	bcf	3,7	;select IRP bank0
  1125  02E9  0080               	movwf	0
  1126  02EA  3001               	movlw	1
  1127  02EB  00C9               	movwf	??_ftoa
  1128  02EC  0849               	movf	??_ftoa,w
  1129  02ED  07D2               	addwf	ftoa@cp,f
  1130  02EE  0844               	movf	ftoa@f,w
  1131  02EF  00F0               	movwf	___ftneg@f1
  1132  02F0  0845               	movf	ftoa@f+1,w
  1133  02F1  00F1               	movwf	___ftneg@f1+1
  1134  02F2  0846               	movf	ftoa@f+2,w
  1135  02F3  00F2               	movwf	___ftneg@f1+2
  1136  02F4  120A  158A  2650  120A  118A  	fcall	___ftneg
  1137  02F9  0870               	movf	?___ftneg,w
  1138  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1139  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  1140  02FC  00C4               	movwf	ftoa@f
  1141  02FD  0871               	movf	?___ftneg+1,w
  1142  02FE  00C5               	movwf	ftoa@f+1
  1143  02FF  0872               	movf	?___ftneg+2,w
  1144  0300  00C6               	movwf	ftoa@f+2
  1145  0301                     l1702:	
  1146  0301  1283               	bcf	3,5	;RP0=0, select bank0
  1147  0302  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0303  0844               	movf	ftoa@f,w
  1149  0304  00AA               	movwf	___fttol@f1
  1150  0305  0845               	movf	ftoa@f+1,w
  1151  0306  00AB               	movwf	___fttol@f1+1
  1152  0307  0846               	movf	ftoa@f+2,w
  1153  0308  00AC               	movwf	___fttol@f1+2
  1154  0309  120A  118A  223A  120A  118A  	fcall	___fttol
  1155  030E  1283               	bcf	3,5	;RP0=0, select bank0
  1156  030F  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0310  082D               	movf	?___fttol+3,w
  1158  0311  00D1               	movwf	ftoa@l+3
  1159  0312  082C               	movf	?___fttol+2,w
  1160  0313  00D0               	movwf	ftoa@l+2
  1161  0314  082B               	movf	?___fttol+1,w
  1162  0315  00CF               	movwf	ftoa@l+1
  1163  0316  082A               	movf	?___fttol,w
  1164  0317  00CE               	movwf	ftoa@l
  1165  0318  0851               	movf	ftoa@l+3,w
  1166  0319  00FB               	movwf	___lltoft@c+3
  1167  031A  0850               	movf	ftoa@l+2,w
  1168  031B  00FA               	movwf	___lltoft@c+2
  1169  031C  084F               	movf	ftoa@l+1,w
  1170  031D  00F9               	movwf	___lltoft@c+1
  1171  031E  084E               	movf	ftoa@l,w
  1172  031F  00F8               	movwf	___lltoft@c
  1173  0320  120A  158A  26F8  120A  118A  	fcall	___lltoft
  1174  0325  0878               	movf	?___lltoft,w
  1175  0326  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0327  1303               	bcf	3,6	;RP1=0, select bank0
  1177  0328  00A7               	movwf	___ftsub@f2
  1178  0329  0879               	movf	?___lltoft+1,w
  1179  032A  00A8               	movwf	___ftsub@f2+1
  1180  032B  087A               	movf	?___lltoft+2,w
  1181  032C  00A9               	movwf	___ftsub@f2+2
  1182  032D  0844               	movf	ftoa@f,w
  1183  032E  00AA               	movwf	___ftsub@f1
  1184  032F  0845               	movf	ftoa@f+1,w
  1185  0330  00AB               	movwf	___ftsub@f1+1
  1186  0331  0846               	movf	ftoa@f+2,w
  1187  0332  00AC               	movwf	___ftsub@f1+2
  1188  0333  120A  158A  26D7  120A  118A  	fcall	___ftsub
  1189  0338  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0339  1303               	bcf	3,6	;RP1=0, select bank0
  1191  033A  0827               	movf	?___ftsub,w
  1192  033B  00C4               	movwf	ftoa@f
  1193  033C  0828               	movf	?___ftsub+1,w
  1194  033D  00C5               	movwf	ftoa@f+1
  1195  033E  0829               	movf	?___ftsub+2,w
  1196  033F  00C6               	movwf	ftoa@f+2
  1197  0340  0844               	movf	ftoa@f,w
  1198  0341  00FB               	movwf	___ftmul@f2
  1199  0342  0845               	movf	ftoa@f+1,w
  1200  0343  00FC               	movwf	___ftmul@f2+1
  1201  0344  0846               	movf	ftoa@f+2,w
  1202  0345  00FD               	movwf	___ftmul@f2+2
  1203  0346  3024               	movlw	36
  1204  0347  00F8               	movwf	___ftmul@f1
  1205  0348  3074               	movlw	116
  1206  0349  00F9               	movwf	___ftmul@f1+1
  1207  034A  3049               	movlw	73
  1208  034B  00FA               	movwf	___ftmul@f1+2
  1209  034C  120A  118A  2382  120A  118A  	fcall	___ftmul
  1210  0351  0878               	movf	?___ftmul,w
  1211  0352  1283               	bcf	3,5	;RP0=0, select bank0
  1212  0353  1303               	bcf	3,6	;RP1=0, select bank0
  1213  0354  00AA               	movwf	___fttol@f1
  1214  0355  0879               	movf	?___ftmul+1,w
  1215  0356  00AB               	movwf	___fttol@f1+1
  1216  0357  087A               	movf	?___ftmul+2,w
  1217  0358  00AC               	movwf	___fttol@f1+2
  1218  0359  120A  118A  223A  120A  118A  	fcall	___fttol
  1219  035E  1283               	bcf	3,5	;RP0=0, select bank0
  1220  035F  1303               	bcf	3,6	;RP1=0, select bank0
  1221  0360  082D               	movf	?___fttol+3,w
  1222  0361  00CD               	movwf	ftoa@rem+3
  1223  0362  082C               	movf	?___fttol+2,w
  1224  0363  00CC               	movwf	ftoa@rem+2
  1225  0364  082B               	movf	?___fttol+1,w
  1226  0365  00CB               	movwf	ftoa@rem+1
  1227  0366  082A               	movf	?___fttol,w
  1228  0367  00CA               	movwf	ftoa@rem
  1229  0368  3035               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1230  0369  00C9               	movwf	??_ftoa
  1231  036A  0849               	movf	??_ftoa,w
  1232  036B  00AA               	movwf	sprintf@f
  1233  036C  0851               	movf	ftoa@l+3,w
  1234  036D  00AE               	movwf	?_sprintf+4
  1235  036E  0850               	movf	ftoa@l+2,w
  1236  036F  00AD               	movwf	?_sprintf+3
  1237  0370  084F               	movf	ftoa@l+1,w
  1238  0371  00AC               	movwf	?_sprintf+2
  1239  0372  084E               	movf	ftoa@l,w
  1240  0373  00AB               	movwf	?_sprintf+1
  1241  0374  084D               	movf	ftoa@rem+3,w
  1242  0375  00B2               	movwf	?_sprintf+8
  1243  0376  084C               	movf	ftoa@rem+2,w
  1244  0377  00B1               	movwf	?_sprintf+7
  1245  0378  084B               	movf	ftoa@rem+1,w
  1246  0379  00B0               	movwf	?_sprintf+6
  1247  037A  084A               	movf	ftoa@rem,w
  1248  037B  00AF               	movwf	?_sprintf+5
  1249  037C  0852               	movf	ftoa@cp,w
  1250  037D  120A  118A  255A   	fcall	_sprintf
  1251  0380  30A0               	movlw	(low (ftoa@buf| 0))& (0+255)
  1252  0381  0008               	return
  1253  0382                     __end_of_ftoa:	
  1254                           
  1255                           	psect	text3
  1256  055A                     __ptext3:	
  1257 ;; *************** function _sprintf *****************
  1258 ;; Defined at:
  1259 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;  sp              1    wreg     PTR unsigned char 
  1262 ;;		 -> ftoa@buf(17), LCDPrintNumber@str(7), 
  1263 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  1264 ;;		 -> STR_5(11), STR_1(3), 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  1267 ;;		 -> ftoa@buf(17), LCDPrintNumber@str(7), 
  1268 ;;  val             4   25[BANK0 ] unsigned long 
  1269 ;;  tmpval          4    0        struct .
  1270 ;;  prec            2   33[BANK0 ] int 
  1271 ;;  width           2   31[BANK0 ] int 
  1272 ;;  cp              2    0        PTR const unsigned char 
  1273 ;;  len             2    0        unsigned int 
  1274 ;;  c               1   35[BANK0 ] char 
  1275 ;;  flag            1   29[BANK0 ] unsigned char 
  1276 ;;  ap              1   24[BANK0 ] PTR void [1]
  1277 ;;		 -> ?_sprintf(2), 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  2   10[BANK0 ] int 
  1280 ;; Registers used:
  1281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1287 ;;      Params:         0       9       0       0       0
  1288 ;;      Locals:         0      12       0       0       0
  1289 ;;      Temps:          0       5       0       0       0
  1290 ;;      Totals:         0      26       0       0       0
  1291 ;;Total ram usage:       26 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    1
  1294 ;; This function calls:
  1295 ;;		___lldiv
  1296 ;;		___llmod
  1297 ;;		___wmul
  1298 ;;		_isdigit
  1299 ;; This function is called by:
  1300 ;;		_ftoa
  1301 ;;		_LCDPrintNumber
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           
  1306                           ;psect for function _sprintf
  1307  055A                     _sprintf:	
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1311                           ;sprintf@sp stored from wreg
  1312  055A  1283               	bcf	3,5	;RP0=0, select bank0
  1313  055B  1303               	bcf	3,6	;RP1=0, select bank0
  1314  055C  00BE               	movwf	sprintf@sp
  1315                           
  1316                           ;doprnt.c: 494: va_list ap;
  1317                           ;doprnt.c: 499: signed char c;
  1318                           ;doprnt.c: 501: int width;
  1319                           ;doprnt.c: 504: int prec;
  1320                           ;doprnt.c: 508: unsigned char flag;
  1321                           ;doprnt.c: 523: union {
  1322                           ;doprnt.c: 524: unsigned long vd;
  1323                           ;doprnt.c: 525: double integ;
  1324                           ;doprnt.c: 526: } tmpval;
  1325                           ;doprnt.c: 528: unsigned long val;
  1326                           ;doprnt.c: 529: unsigned len;
  1327                           ;doprnt.c: 530: const char * cp;
  1328                           ;doprnt.c: 533: *ap = __va_start();
  1329  055D  302B               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1330  055E  00B3               	movwf	??_sprintf
  1331  055F  0833               	movf	??_sprintf,w
  1332  0560  00B8               	movwf	sprintf@ap
  1333  0561                     l1536:	
  1334                           ;doprnt.c: 536: while(c = *f++) {
  1335                           
  1336  0561  3001               	movlw	1
  1337  0562  07AA               	addwf	sprintf@f,f
  1338  0563  30FF               	movlw	-1
  1339  0564  072A               	addwf	sprintf@f,w
  1340  0565  0084               	movwf	4
  1341  0566  120A  158A  200A  120A  118A  	fcall	stringdir
  1342  056B  00B3               	movwf	??_sprintf
  1343  056C  0833               	movf	??_sprintf,w
  1344  056D  00C3               	movwf	sprintf@c
  1345  056E  0843               	movf	sprintf@c,w
  1346  056F  1903               	btfsc	3,2
  1347  0570  2FDC               	goto	l1538
  1348                           
  1349                           ;doprnt.c: 538: if(c != '%')
  1350  0571  3025               	movlw	37
  1351  0572  0643               	xorwf	sprintf@c,w
  1352  0573  1903               	btfsc	3,2
  1353  0574  2D81               	goto	l1416
  1354                           
  1355                           ;doprnt.c: 540: {
  1356                           ;doprnt.c: 541: ((*sp++ = (c)));
  1357  0575  0843               	movf	sprintf@c,w
  1358  0576  00B3               	movwf	??_sprintf
  1359  0577  083E               	movf	sprintf@sp,w
  1360  0578  0084               	movwf	4
  1361  0579  0833               	movf	??_sprintf,w
  1362  057A  1383               	bcf	3,7	;select IRP bank0
  1363  057B  0080               	movwf	0
  1364  057C  3001               	movlw	1
  1365  057D  00B3               	movwf	??_sprintf
  1366  057E  0833               	movf	??_sprintf,w
  1367  057F  07BE               	addwf	sprintf@sp,f
  1368                           
  1369                           ;doprnt.c: 542: continue;
  1370  0580  2D61               	goto	l1536
  1371  0581                     l1416:	
  1372                           
  1373                           ;doprnt.c: 543: }
  1374                           ;doprnt.c: 546: width = 0;
  1375  0581  01BF               	clrf	sprintf@width
  1376  0582  01C0               	clrf	sprintf@width+1
  1377                           
  1378                           ;doprnt.c: 548: flag = 0;
  1379  0583  01BD               	clrf	sprintf@flag
  1380                           
  1381                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1382  0584  082A               	movf	sprintf@f,w
  1383  0585  0084               	movwf	4
  1384  0586  120A  158A  200A  120A  118A  	fcall	stringdir
  1385  058B  120A  158A  268B  120A  118A  	fcall	_isdigit
  1386  0590  1C03               	btfss	3,0
  1387  0591  2DD0               	goto	l1430
  1388                           
  1389                           ;doprnt.c: 598: width = 0;
  1390  0592  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0593  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0594  01BF               	clrf	sprintf@width
  1393  0595  01C0               	clrf	sprintf@width+1
  1394  0596                     l1422:	
  1395                           ;doprnt.c: 599: do {
  1396                           
  1397                           
  1398                           ;doprnt.c: 600: width *= 10;
  1399  0596  300A               	movlw	10
  1400  0597  00F0               	movwf	___wmul@multiplier
  1401  0598  3000               	movlw	0
  1402  0599  00F1               	movwf	___wmul@multiplier+1
  1403  059A  1283               	bcf	3,5	;RP0=0, select bank0
  1404  059B  1303               	bcf	3,6	;RP1=0, select bank0
  1405  059C  0840               	movf	sprintf@width+1,w
  1406  059D  00F3               	movwf	___wmul@multiplicand+1
  1407  059E  083F               	movf	sprintf@width,w
  1408  059F  00F2               	movwf	___wmul@multiplicand
  1409  05A0  120A  118A  2005  120A  118A  	fcall	___wmul
  1410  05A5  0871               	movf	?___wmul+1,w
  1411  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  1412  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  1413  05A8  00C0               	movwf	sprintf@width+1
  1414  05A9  0870               	movf	?___wmul,w
  1415  05AA  00BF               	movwf	sprintf@width
  1416                           
  1417                           ;doprnt.c: 601: width += *f++ - '0';
  1418  05AB  082A               	movf	sprintf@f,w
  1419  05AC  0084               	movwf	4
  1420  05AD  120A  158A  200A  120A  118A  	fcall	stringdir
  1421  05B2  3ED0               	addlw	208
  1422  05B3  00B3               	movwf	??_sprintf
  1423  05B4  30FF               	movlw	255
  1424  05B5  1803               	skipnc
  1425  05B6  3000               	movlw	0
  1426  05B7  00B4               	movwf	??_sprintf+1
  1427  05B8  0833               	movf	??_sprintf,w
  1428  05B9  07BF               	addwf	sprintf@width,f
  1429  05BA  1803               	skipnc
  1430  05BB  0AC0               	incf	sprintf@width+1,f
  1431  05BC  0834               	movf	??_sprintf+1,w
  1432  05BD  07C0               	addwf	sprintf@width+1,f
  1433  05BE  3001               	movlw	1
  1434  05BF  00B3               	movwf	??_sprintf
  1435  05C0  0833               	movf	??_sprintf,w
  1436  05C1  07AA               	addwf	sprintf@f,f
  1437                           
  1438                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1439  05C2  082A               	movf	sprintf@f,w
  1440  05C3  0084               	movwf	4
  1441  05C4  120A  158A  200A  120A  118A  	fcall	stringdir
  1442  05C9  120A  158A  268B  120A  118A  	fcall	_isdigit
  1443  05CE  1803               	btfsc	3,0
  1444  05CF  2D96               	goto	l1422
  1445  05D0                     l1430:	
  1446                           
  1447                           ;doprnt.c: 608: }
  1448                           ;doprnt.c: 611: if(*f == '.') {
  1449  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1450  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1451  05D2  082A               	movf	sprintf@f,w
  1452  05D3  0084               	movwf	4
  1453  05D4  120A  158A  200A  120A  118A  	fcall	stringdir
  1454  05D9  3A2E               	xorlw	46
  1455  05DA  1D03               	skipz
  1456  05DB  2E1C               	goto	l1442
  1457                           
  1458                           ;doprnt.c: 613: f++;
  1459  05DC  3001               	movlw	1
  1460  05DD  00B3               	movwf	??_sprintf
  1461  05DE  0833               	movf	??_sprintf,w
  1462  05DF  07AA               	addwf	sprintf@f,f
  1463                           
  1464                           ;doprnt.c: 620: {
  1465                           ;doprnt.c: 621: prec = 0;
  1466  05E0  01C1               	clrf	sprintf@prec
  1467  05E1  01C2               	clrf	sprintf@prec+1
  1468  05E2                     l1440:	
  1469                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1470                           
  1471  05E2  082A               	movf	sprintf@f,w
  1472  05E3  0084               	movwf	4
  1473  05E4  120A  158A  200A  120A  118A  	fcall	stringdir
  1474  05E9  120A  158A  268B  120A  118A  	fcall	_isdigit
  1475  05EE  1C03               	btfss	3,0
  1476  05EF  2E25               	goto	l1446
  1477                           
  1478                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1479  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  1480  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  1481  05F2  0842               	movf	sprintf@prec+1,w
  1482  05F3  00F1               	movwf	___wmul@multiplier+1
  1483  05F4  0841               	movf	sprintf@prec,w
  1484  05F5  00F0               	movwf	___wmul@multiplier
  1485  05F6  300A               	movlw	10
  1486  05F7  00F2               	movwf	___wmul@multiplicand
  1487  05F8  3000               	movlw	0
  1488  05F9  00F3               	movwf	___wmul@multiplicand+1
  1489  05FA  120A  118A  2005  120A  118A  	fcall	___wmul
  1490  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0600  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0601  082A               	movf	sprintf@f,w
  1493  0602  0084               	movwf	4
  1494  0603  120A  158A  200A  120A  118A  	fcall	stringdir
  1495  0608  0770               	addwf	?___wmul,w
  1496  0609  00B3               	movwf	??_sprintf
  1497  060A  3000               	movlw	0
  1498  060B  1803               	skipnc
  1499  060C  3001               	movlw	1
  1500  060D  0771               	addwf	?___wmul+1,w
  1501  060E  00B4               	movwf	??_sprintf+1
  1502  060F  0833               	movf	??_sprintf,w
  1503  0610  3ED0               	addlw	208
  1504  0611  00C1               	movwf	sprintf@prec
  1505  0612  0834               	movf	??_sprintf+1,w
  1506  0613  1803               	skipnc
  1507  0614  3E01               	addlw	1
  1508  0615  3EFF               	addlw	255
  1509  0616  00C2               	movwf	sprintf@prec+1
  1510  0617  3001               	movlw	1
  1511  0618  00B3               	movwf	??_sprintf
  1512  0619  0833               	movf	??_sprintf,w
  1513  061A  07AA               	addwf	sprintf@f,f
  1514  061B  2DE2               	goto	l1440
  1515  061C                     l1442:	
  1516                           ;doprnt.c: 624: }
  1517                           ;doprnt.c: 625: } else {
  1518                           
  1519                           
  1520                           ;doprnt.c: 626: prec = 0;
  1521  061C  1283               	bcf	3,5	;RP0=0, select bank0
  1522  061D  1303               	bcf	3,6	;RP1=0, select bank0
  1523  061E  01C1               	clrf	sprintf@prec
  1524  061F  01C2               	clrf	sprintf@prec+1
  1525                           
  1526                           ;doprnt.c: 635: switch(c = *f++) {
  1527                           
  1528                           ;doprnt.c: 630: }
  1529                           ;doprnt.c: 633: loop:
  1530  0620  2E25               	goto	l1446
  1531  0621                     l119:	
  1532                           ;doprnt.c: 641: case 'l':
  1533                           
  1534                           ;doprnt.c: 638: goto alldone;
  1535                           
  1536                           ;doprnt.c: 637: case 0:
  1537                           
  1538                           
  1539                           ;doprnt.c: 643: flag |= 0x10;
  1540  0621  163D               	bsf	sprintf@flag,4
  1541                           
  1542                           ;doprnt.c: 644: goto loop;
  1543  0622  2E25               	goto	l1446
  1544  0623                     l124:	
  1545                           ;doprnt.c: 817: case 'u':
  1546                           
  1547                           ;doprnt.c: 813: continue;
  1548                           
  1549                           ;doprnt.c: 802: default:
  1550                           
  1551                           ;doprnt.c: 698: case 'i':
  1552                           ;doprnt.c: 699: break;
  1553                           
  1554                           ;doprnt.c: 697: case 'd':
  1555                           
  1556                           
  1557                           ;doprnt.c: 818: flag |= 0x40;
  1558  0623  173D               	bsf	sprintf@flag,6
  1559                           
  1560                           ;doprnt.c: 822: }
  1561                           
  1562                           ;doprnt.c: 819: break;
  1563  0624  2E42               	goto	l122
  1564  0625                     l1446:	
  1565  0625  3001               	movlw	1
  1566  0626  1283               	bcf	3,5	;RP0=0, select bank0
  1567  0627  1303               	bcf	3,6	;RP1=0, select bank0
  1568  0628  07AA               	addwf	sprintf@f,f
  1569  0629  30FF               	movlw	-1
  1570  062A  072A               	addwf	sprintf@f,w
  1571  062B  0084               	movwf	4
  1572  062C  120A  158A  200A  120A  118A  	fcall	stringdir
  1573  0631  00C3               	movwf	sprintf@c
  1574                           
  1575                           ; Switch size 1, requested type "space"
  1576                           ; Number of cases is 5, Range of values is 0 to 117
  1577                           ; switch strategies available:
  1578                           ; Name         Instructions Cycles
  1579                           ; simple_byte           16     9 (average)
  1580                           ; jumptable            260     6 (fixed)
  1581                           ;	Chosen strategy is simple_byte
  1582  0632  3A00               	xorlw	0	; case 0
  1583  0633  1903               	skipnz
  1584  0634  2FDC               	goto	l1538
  1585  0635  3A64               	xorlw	100	; case 100
  1586  0636  1903               	skipnz
  1587  0637  2E42               	goto	l122
  1588  0638  3A0D               	xorlw	13	; case 105
  1589  0639  1903               	skipnz
  1590  063A  2E42               	goto	l122
  1591  063B  3A05               	xorlw	5	; case 108
  1592  063C  1903               	skipnz
  1593  063D  2E21               	goto	l119
  1594  063E  3A19               	xorlw	25	; case 117
  1595  063F  1903               	skipnz
  1596  0640  2E23               	goto	l124
  1597  0641  2D61               	goto	l1536
  1598  0642                     l122:	
  1599                           
  1600                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  1601  0642  1B3D               	btfsc	sprintf@flag,6
  1602  0643  2E7D               	goto	l125
  1603                           
  1604                           ;doprnt.c: 1253: {
  1605                           ;doprnt.c: 1255: if(flag & 0x10)
  1606  0644  1E3D               	btfss	sprintf@flag,4
  1607  0645  2E56               	goto	l1454
  1608                           
  1609                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1610  0646  0838               	movf	sprintf@ap,w
  1611  0647  0084               	movwf	4
  1612  0648  1383               	bcf	3,7	;select IRP bank0
  1613  0649  0800               	movf	0,w
  1614  064A  00B9               	movwf	sprintf@val
  1615  064B  0A84               	incf	4,f
  1616  064C  0800               	movf	0,w
  1617  064D  00BA               	movwf	sprintf@val+1
  1618  064E  0A84               	incf	4,f
  1619  064F  0800               	movf	0,w
  1620  0650  00BB               	movwf	sprintf@val+2
  1621  0651  0A84               	incf	4,f
  1622  0652  0800               	movf	0,w
  1623  0653  00BC               	movwf	sprintf@val+3
  1624  0654  3004               	movlw	4
  1625  0655  2E68               	goto	L2
  1626  0656                     l1454:	
  1627                           
  1628                           ;doprnt.c: 1257: else
  1629                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1630  0656  0838               	movf	sprintf@ap,w
  1631  0657  0084               	movwf	4
  1632  0658  1383               	bcf	3,7	;select IRP bank0
  1633  0659  0800               	movf	0,w
  1634  065A  00B3               	movwf	??_sprintf
  1635  065B  0A84               	incf	4,f
  1636  065C  0800               	movf	0,w
  1637  065D  00B4               	movwf	??_sprintf+1
  1638  065E  0833               	movf	??_sprintf,w
  1639  065F  00B9               	movwf	sprintf@val
  1640  0660  0834               	movf	??_sprintf+1,w
  1641  0661  00BA               	movwf	sprintf@val+1
  1642  0662  3000               	movlw	0
  1643  0663  1BBA               	btfsc	sprintf@val+1,7
  1644  0664  30FF               	movlw	255
  1645  0665  00BB               	movwf	sprintf@val+2
  1646  0666  00BC               	movwf	sprintf@val+3
  1647  0667  3002               	movlw	2
  1648  0668                     L2:	
  1649  0668  00B3               	movwf	??_sprintf
  1650  0669  0833               	movf	??_sprintf,w
  1651  066A  07B8               	addwf	sprintf@ap,f
  1652                           
  1653                           ;doprnt.c: 1261: if((long)val < 0) {
  1654  066B  1FBC               	btfss	sprintf@val+3,7
  1655  066C  2EA1               	goto	l1472
  1656                           
  1657                           ;doprnt.c: 1262: flag |= 0x03;
  1658  066D  3003               	movlw	3
  1659  066E  00B3               	movwf	??_sprintf
  1660  066F  0833               	movf	??_sprintf,w
  1661  0670  04BD               	iorwf	sprintf@flag,f
  1662                           
  1663                           ;doprnt.c: 1263: val = -val;
  1664  0671  09B9               	comf	sprintf@val,f
  1665  0672  09BA               	comf	sprintf@val+1,f
  1666  0673  09BB               	comf	sprintf@val+2,f
  1667  0674  09BC               	comf	sprintf@val+3,f
  1668  0675  0AB9               	incf	sprintf@val,f
  1669  0676  1903               	skipnz
  1670  0677  0ABA               	incf	sprintf@val+1,f
  1671  0678  1903               	skipnz
  1672  0679  0ABB               	incf	sprintf@val+2,f
  1673  067A  1903               	skipnz
  1674  067B  0ABC               	incf	sprintf@val+3,f
  1675                           
  1676                           ;doprnt.c: 1264: }
  1677                           ;doprnt.c: 1266: }
  1678  067C  2EA1               	goto	l1472
  1679  067D                     l125:	
  1680                           
  1681                           ;doprnt.c: 1268: else
  1682                           ;doprnt.c: 1273: {
  1683                           ;doprnt.c: 1281: if(flag & 0x10)
  1684  067D  1E3D               	btfss	sprintf@flag,4
  1685  067E  2E8F               	goto	l1468
  1686                           
  1687                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1688  067F  0838               	movf	sprintf@ap,w
  1689  0680  0084               	movwf	4
  1690  0681  1383               	bcf	3,7	;select IRP bank0
  1691  0682  0800               	movf	0,w
  1692  0683  00B9               	movwf	sprintf@val
  1693  0684  0A84               	incf	4,f
  1694  0685  0800               	movf	0,w
  1695  0686  00BA               	movwf	sprintf@val+1
  1696  0687  0A84               	incf	4,f
  1697  0688  0800               	movf	0,w
  1698  0689  00BB               	movwf	sprintf@val+2
  1699  068A  0A84               	incf	4,f
  1700  068B  0800               	movf	0,w
  1701  068C  00BC               	movwf	sprintf@val+3
  1702  068D  3004               	movlw	4
  1703  068E  2E9E               	goto	L3
  1704  068F                     l1468:	
  1705                           
  1706                           ;doprnt.c: 1283: else
  1707                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1708  068F  0838               	movf	sprintf@ap,w
  1709  0690  0084               	movwf	4
  1710  0691  1383               	bcf	3,7	;select IRP bank0
  1711  0692  0800               	movf	0,w
  1712  0693  00B3               	movwf	??_sprintf
  1713  0694  0A84               	incf	4,f
  1714  0695  0800               	movf	0,w
  1715  0696  00B4               	movwf	??_sprintf+1
  1716  0697  0833               	movf	??_sprintf,w
  1717  0698  00B9               	movwf	sprintf@val
  1718  0699  0834               	movf	??_sprintf+1,w
  1719  069A  00BA               	movwf	sprintf@val+1
  1720  069B  01BB               	clrf	sprintf@val+2
  1721  069C  01BC               	clrf	sprintf@val+3
  1722  069D  3002               	movlw	2
  1723  069E                     L3:	
  1724  069E  00B3               	movwf	??_sprintf
  1725  069F  0833               	movf	??_sprintf,w
  1726  06A0  07B8               	addwf	sprintf@ap,f
  1727  06A1                     l1472:	
  1728                           
  1729                           ;doprnt.c: 1287: }
  1730                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1731  06A1  0841               	movf	sprintf@prec,w
  1732  06A2  0442               	iorwf	sprintf@prec+1,w
  1733  06A3  1D03               	btfss	3,2
  1734  06A4  2EB1               	goto	l1478
  1735  06A5  083C               	movf	sprintf@val+3,w
  1736  06A6  043B               	iorwf	sprintf@val+2,w
  1737  06A7  043A               	iorwf	sprintf@val+1,w
  1738  06A8  0439               	iorwf	sprintf@val,w
  1739  06A9  1D03               	skipz
  1740  06AA  2EB1               	goto	l1478
  1741                           
  1742                           ;doprnt.c: 1291: prec++;
  1743  06AB  3001               	movlw	1
  1744  06AC  07C1               	addwf	sprintf@prec,f
  1745  06AD  1803               	skipnc
  1746  06AE  0AC2               	incf	sprintf@prec+1,f
  1747  06AF  3000               	movlw	0
  1748  06B0  07C2               	addwf	sprintf@prec+1,f
  1749  06B1                     l1478:	
  1750                           
  1751                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1752  06B1  01C3               	clrf	sprintf@c
  1753  06B2  0AC3               	incf	sprintf@c,f
  1754  06B3  300A               	movlw	10
  1755  06B4  0643               	xorwf	sprintf@c,w
  1756  06B5  1903               	btfsc	3,2
  1757  06B6  2EF3               	goto	l1490
  1758  06B7                     l1484:	
  1759                           
  1760                           ;doprnt.c: 1306: if(val < dpowers[c])
  1761  06B7  0843               	movf	sprintf@c,w
  1762  06B8  00B3               	movwf	??_sprintf
  1763  06B9  3001               	movlw	1
  1764  06BA                     u2375:	
  1765  06BA  1003               	clrc
  1766  06BB  0DB3               	rlf	??_sprintf,f
  1767  06BC  3EFF               	addlw	-1
  1768  06BD  1D03               	skipz
  1769  06BE  2EBA               	goto	u2375
  1770  06BF  1003               	clrc
  1771  06C0  0D33               	rlf	??_sprintf,w
  1772  06C1  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1773  06C2  0084               	movwf	4
  1774  06C3  120A  158A  200A  120A  118A  	fcall	stringdir
  1775  06C8  00B4               	movwf	??_sprintf+1
  1776  06C9  120A  158A  200A  120A  118A  	fcall	stringdir
  1777  06CE  00B5               	movwf	??_sprintf+2
  1778  06CF  120A  158A  200A  120A  118A  	fcall	stringdir
  1779  06D4  00B6               	movwf	??_sprintf+3
  1780  06D5  120A  158A  200A  120A  118A  	fcall	stringdir
  1781  06DA  00B7               	movwf	??_sprintf+4
  1782  06DB  0837               	movf	??_sprintf+4,w
  1783  06DC  023C               	subwf	sprintf@val+3,w
  1784  06DD  1D03               	skipz
  1785  06DE  2EE9               	goto	u2385
  1786  06DF  0836               	movf	??_sprintf+3,w
  1787  06E0  023B               	subwf	sprintf@val+2,w
  1788  06E1  1D03               	skipz
  1789  06E2  2EE9               	goto	u2385
  1790  06E3  0835               	movf	??_sprintf+2,w
  1791  06E4  023A               	subwf	sprintf@val+1,w
  1792  06E5  1D03               	skipz
  1793  06E6  2EE9               	goto	u2385
  1794  06E7  0834               	movf	??_sprintf+1,w
  1795  06E8  0239               	subwf	sprintf@val,w
  1796  06E9                     u2385:	
  1797  06E9  1C03               	btfss	3,0
  1798  06EA  2EF3               	goto	l1490
  1799                           
  1800                           ;doprnt.c: 1307: break;
  1801  06EB  3001               	movlw	1
  1802  06EC  00B3               	movwf	??_sprintf
  1803  06ED  0833               	movf	??_sprintf,w
  1804  06EE  07C3               	addwf	sprintf@c,f
  1805  06EF  300A               	movlw	10
  1806  06F0  0643               	xorwf	sprintf@c,w
  1807  06F1  1D03               	btfss	3,2
  1808  06F2  2EB7               	goto	l1484
  1809  06F3                     l1490:	
  1810                           
  1811                           ;doprnt.c: 1339: if(c < prec)
  1812  06F3  0843               	movf	sprintf@c,w
  1813  06F4  00B3               	movwf	??_sprintf
  1814  06F5  01B4               	clrf	??_sprintf+1
  1815  06F6  1BB3               	btfsc	??_sprintf,7
  1816  06F7  03B4               	decf	??_sprintf+1,f
  1817  06F8  0834               	movf	??_sprintf+1,w
  1818  06F9  3A80               	xorlw	128
  1819  06FA  00B5               	movwf	??_sprintf+2
  1820  06FB  0842               	movf	sprintf@prec+1,w
  1821  06FC  3A80               	xorlw	128
  1822  06FD  0235               	subwf	??_sprintf+2,w
  1823  06FE  1D03               	skipz
  1824  06FF  2F02               	goto	u2405
  1825  0700  0841               	movf	sprintf@prec,w
  1826  0701  0233               	subwf	??_sprintf,w
  1827  0702                     u2405:	
  1828  0702  1803               	skipnc
  1829  0703  2F0B               	goto	l1494
  1830                           
  1831                           ;doprnt.c: 1340: c = prec;
  1832  0704  1283               	bcf	3,5	;RP0=0, select bank0
  1833  0705  1303               	bcf	3,6	;RP1=0, select bank0
  1834  0706  0841               	movf	sprintf@prec,w
  1835  0707  00B3               	movwf	??_sprintf
  1836  0708  0833               	movf	??_sprintf,w
  1837  0709  00C3               	movwf	sprintf@c
  1838  070A  2F25               	goto	l137
  1839  070B                     l1494:	
  1840                           
  1841                           ;doprnt.c: 1341: else if(prec < c)
  1842  070B  1283               	bcf	3,5	;RP0=0, select bank0
  1843  070C  1303               	bcf	3,6	;RP1=0, select bank0
  1844  070D  0843               	movf	sprintf@c,w
  1845  070E  00B3               	movwf	??_sprintf
  1846  070F  01B4               	clrf	??_sprintf+1
  1847  0710  1BB3               	btfsc	??_sprintf,7
  1848  0711  03B4               	decf	??_sprintf+1,f
  1849  0712  0842               	movf	sprintf@prec+1,w
  1850  0713  3A80               	xorlw	128
  1851  0714  00B5               	movwf	??_sprintf+2
  1852  0715  0834               	movf	??_sprintf+1,w
  1853  0716  3A80               	xorlw	128
  1854  0717  0235               	subwf	??_sprintf+2,w
  1855  0718  1D03               	skipz
  1856  0719  2F1C               	goto	u2415
  1857  071A  0833               	movf	??_sprintf,w
  1858  071B  0241               	subwf	sprintf@prec,w
  1859  071C                     u2415:	
  1860  071C  1803               	skipnc
  1861  071D  2F25               	goto	l137
  1862                           
  1863                           ;doprnt.c: 1342: prec = c;
  1864  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1865  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1866  0720  0843               	movf	sprintf@c,w
  1867  0721  00C1               	movwf	sprintf@prec
  1868  0722  01C2               	clrf	sprintf@prec+1
  1869  0723  1BC1               	btfsc	sprintf@prec,7
  1870  0724  03C2               	decf	sprintf@prec+1,f
  1871  0725                     l137:	
  1872                           
  1873                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1874  0725  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0726  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0727  083F               	movf	sprintf@width,w
  1877  0728  0440               	iorwf	sprintf@width+1,w
  1878  0729  1903               	btfsc	3,2
  1879  072A  2F35               	goto	l1508
  1880  072B  083D               	movf	sprintf@flag,w
  1881  072C  3903               	andlw	3
  1882  072D  1903               	btfsc	3,2
  1883  072E  2F35               	goto	l1508
  1884                           
  1885                           ;doprnt.c: 1346: width--;
  1886  072F  30FF               	movlw	255
  1887  0730  07BF               	addwf	sprintf@width,f
  1888  0731  1803               	skipnc
  1889  0732  0AC0               	incf	sprintf@width+1,f
  1890  0733  30FF               	movlw	255
  1891  0734  07C0               	addwf	sprintf@width+1,f
  1892  0735                     l1508:	
  1893                           ;doprnt.c: 1351: else
  1894                           ;doprnt.c: 1352: width = 0;
  1895                           
  1896                           ;doprnt.c: 1350: width -= prec;
  1897                           
  1898                           ;doprnt.c: 1349: if(width > prec)
  1899                           
  1900                           ;doprnt.c: 1348: if(flag & 0x4000) {
  1901                           
  1902                           
  1903                           ;doprnt.c: 1353: }
  1904                           ;doprnt.c: 1381: if(width > c)
  1905  0735  0843               	movf	sprintf@c,w
  1906  0736  00B3               	movwf	??_sprintf
  1907  0737  01B4               	clrf	??_sprintf+1
  1908  0738  1BB3               	btfsc	??_sprintf,7
  1909  0739  03B4               	decf	??_sprintf+1,f
  1910  073A  0834               	movf	??_sprintf+1,w
  1911  073B  3A80               	xorlw	128
  1912  073C  00B5               	movwf	??_sprintf+2
  1913  073D  0840               	movf	sprintf@width+1,w
  1914  073E  3A80               	xorlw	128
  1915  073F  0235               	subwf	??_sprintf+2,w
  1916  0740  1D03               	skipz
  1917  0741  2F44               	goto	u2455
  1918  0742  083F               	movf	sprintf@width,w
  1919  0743  0233               	subwf	??_sprintf,w
  1920  0744                     u2455:	
  1921  0744  1803               	skipnc
  1922  0745  2F54               	goto	l1512
  1923                           
  1924                           ;doprnt.c: 1382: width -= c;
  1925  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1926  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1927  0748  0843               	movf	sprintf@c,w
  1928  0749  00B3               	movwf	??_sprintf
  1929  074A  01B4               	clrf	??_sprintf+1
  1930  074B  1BB3               	btfsc	??_sprintf,7
  1931  074C  03B4               	decf	??_sprintf+1,f
  1932  074D  0833               	movf	??_sprintf,w
  1933  074E  02BF               	subwf	sprintf@width,f
  1934  074F  0834               	movf	??_sprintf+1,w
  1935  0750  1C03               	skipc
  1936  0751  03C0               	decf	sprintf@width+1,f
  1937  0752  02C0               	subwf	sprintf@width+1,f
  1938  0753  2F58               	goto	l1514
  1939  0754                     l1512:	
  1940                           
  1941                           ;doprnt.c: 1383: else
  1942                           ;doprnt.c: 1384: width = 0;
  1943  0754  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0755  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0756  01BF               	clrf	sprintf@width
  1946  0757  01C0               	clrf	sprintf@width+1
  1947  0758                     l1514:	
  1948                           
  1949                           ;doprnt.c: 1422: {
  1950                           ;doprnt.c: 1424: if(width
  1951                           ;doprnt.c: 1428: )
  1952  0758  083F               	movf	sprintf@width,w
  1953  0759  0440               	iorwf	sprintf@width+1,w
  1954  075A  1903               	btfsc	3,2
  1955  075B  2F71               	goto	l1522
  1956  075C                     l1516:	
  1957                           ;doprnt.c: 1429: do
  1958                           
  1959                           
  1960                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1961  075C  3020               	movlw	32
  1962  075D  00B3               	movwf	??_sprintf
  1963  075E  083E               	movf	sprintf@sp,w
  1964  075F  0084               	movwf	4
  1965  0760  0833               	movf	??_sprintf,w
  1966  0761  1383               	bcf	3,7	;select IRP bank0
  1967  0762  0080               	movwf	0
  1968  0763  3001               	movlw	1
  1969  0764  00B3               	movwf	??_sprintf
  1970  0765  0833               	movf	??_sprintf,w
  1971  0766  07BE               	addwf	sprintf@sp,f
  1972                           
  1973                           ;doprnt.c: 1431: while(--width);
  1974  0767  30FF               	movlw	255
  1975  0768  07BF               	addwf	sprintf@width,f
  1976  0769  1803               	skipnc
  1977  076A  0AC0               	incf	sprintf@width+1,f
  1978  076B  30FF               	movlw	255
  1979  076C  07C0               	addwf	sprintf@width+1,f
  1980  076D  083F               	movf	sprintf@width,w
  1981  076E  0440               	iorwf	sprintf@width+1,w
  1982  076F  1D03               	btfss	3,2
  1983  0770  2F5C               	goto	l1516
  1984  0771                     l1522:	
  1985                           
  1986                           ;doprnt.c: 1438: if(flag & 0x03)
  1987  0771  083D               	movf	sprintf@flag,w
  1988  0772  3903               	andlw	3
  1989  0773  1903               	btfsc	3,2
  1990  0774  2F80               	goto	l1534
  1991                           
  1992                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1993  0775  302D               	movlw	45
  1994  0776                     L4:	
  1995  0776  00B3               	movwf	??_sprintf
  1996  0777  083E               	movf	sprintf@sp,w
  1997  0778  0084               	movwf	4
  1998  0779  0833               	movf	??_sprintf,w
  1999  077A  1383               	bcf	3,7	;select IRP bank0
  2000  077B  0080               	movwf	0
  2001  077C  3001               	movlw	1
  2002  077D  00B3               	movwf	??_sprintf
  2003  077E  0833               	movf	??_sprintf,w
  2004  077F  07BE               	addwf	sprintf@sp,f
  2005  0780                     l1534:	
  2006  0780  30FF               	movlw	255
  2007  0781  07C1               	addwf	sprintf@prec,f
  2008  0782  1803               	skipnc
  2009  0783  0AC2               	incf	sprintf@prec+1,f
  2010  0784  30FF               	movlw	255
  2011  0785  07C2               	addwf	sprintf@prec+1,f
  2012  0786  0A41               	incf	sprintf@prec,w
  2013  0787  1903               	btfsc	3,2
  2014  0788  0A42               	incf	sprintf@prec+1,w
  2015  0789  1903               	btfsc	3,2
  2016  078A  2D61               	goto	l1536
  2017                           
  2018                           ;doprnt.c: 1478: {
  2019                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2020                           
  2021                           ;doprnt.c: 1469: }
  2022                           ;doprnt.c: 1474: while(prec--) {
  2023  078B  3000               	movlw	0
  2024  078C  00A3               	movwf	___llmod@divisor+3
  2025  078D  3000               	movlw	0
  2026  078E  00A2               	movwf	___llmod@divisor+2
  2027  078F  3000               	movlw	0
  2028  0790  00A1               	movwf	___llmod@divisor+1
  2029  0791  300A               	movlw	10
  2030  0792  00A0               	movwf	___llmod@divisor
  2031  0793  0841               	movf	sprintf@prec,w
  2032  0794  00B3               	movwf	??_sprintf
  2033  0795  3001               	movlw	1
  2034  0796                     u2495:	
  2035  0796  1003               	clrc
  2036  0797  0DB3               	rlf	??_sprintf,f
  2037  0798  3EFF               	addlw	-1
  2038  0799  1D03               	skipz
  2039  079A  2F96               	goto	u2495
  2040  079B  1003               	clrc
  2041  079C  0D33               	rlf	??_sprintf,w
  2042  079D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2043  079E  0084               	movwf	4
  2044  079F  120A  158A  200A  120A  118A  	fcall	stringdir
  2045  07A4  00F0               	movwf	___lldiv@divisor
  2046  07A5  120A  158A  200A  120A  118A  	fcall	stringdir
  2047  07AA  00F1               	movwf	___lldiv@divisor+1
  2048  07AB  120A  158A  200A  120A  118A  	fcall	stringdir
  2049  07B0  00F2               	movwf	___lldiv@divisor+2
  2050  07B1  120A  158A  200A  120A  118A  	fcall	stringdir
  2051  07B6  00F3               	movwf	___lldiv@divisor+3
  2052  07B7  083C               	movf	sprintf@val+3,w
  2053  07B8  00F7               	movwf	___lldiv@dividend+3
  2054  07B9  083B               	movf	sprintf@val+2,w
  2055  07BA  00F6               	movwf	___lldiv@dividend+2
  2056  07BB  083A               	movf	sprintf@val+1,w
  2057  07BC  00F5               	movwf	___lldiv@dividend+1
  2058  07BD  0839               	movf	sprintf@val,w
  2059  07BE  00F4               	movwf	___lldiv@dividend
  2060  07BF  120A  118A  2026  120A  118A  	fcall	___lldiv
  2061  07C4  0873               	movf	?___lldiv+3,w
  2062  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  2063  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  2064  07C7  00A7               	movwf	___llmod@dividend+3
  2065  07C8  0872               	movf	?___lldiv+2,w
  2066  07C9  00A6               	movwf	___llmod@dividend+2
  2067  07CA  0871               	movf	?___lldiv+1,w
  2068  07CB  00A5               	movwf	___llmod@dividend+1
  2069  07CC  0870               	movf	?___lldiv,w
  2070  07CD  00A4               	movwf	___llmod@dividend
  2071  07CE  120A  158A  2755  120A  118A  	fcall	___llmod
  2072  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  2073  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  2074  07D5  0820               	movf	?___llmod,w
  2075  07D6  3E30               	addlw	48
  2076  07D7  00B4               	movwf	??_sprintf+1
  2077  07D8  0834               	movf	??_sprintf+1,w
  2078  07D9  00C3               	movwf	sprintf@c
  2079                           
  2080                           ;doprnt.c: 1523: }
  2081                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2082  07DA  0843               	movf	sprintf@c,w
  2083  07DB  2F76               	goto	L4
  2084  07DC                     l1538:	
  2085                           ;doprnt.c: 1525: }
  2086                           ;doprnt.c: 1533: }
  2087                           ;doprnt.c: 1535: alldone:
  2088                           
  2089                           
  2090                           ;doprnt.c: 1538: *sp = 0;
  2091  07DC  083E               	movf	sprintf@sp,w
  2092  07DD  0084               	movwf	4
  2093  07DE  1383               	bcf	3,7	;select IRP bank0
  2094  07DF  0180               	clrf	0
  2095  07E0  0008               	return
  2096  07E1                     __end_of_sprintf:	
  2097                           ;doprnt.c: 1540: return 0;
  2098                           ;	Return value of _sprintf is never used
  2099                           
  2100                           
  2101                           	psect	text4
  2102  0E8B                     __ptext4:	
  2103 ;; *************** function _isdigit *****************
  2104 ;; Defined at:
  2105 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  c               1    wreg     unsigned char 
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  c               1    1[COMMON] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;		None               void
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2119 ;;      Params:         0       0       0       0       0
  2120 ;;      Locals:         2       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0
  2122 ;;      Totals:         2       0       0       0       0
  2123 ;;Total ram usage:        2 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_sprintf
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           
  2133                           ;psect for function _isdigit
  2134  0E8B                     _isdigit:	
  2135                           
  2136                           ;incstack = 0
  2137                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2138                           ;isdigit@c stored from wreg
  2139  0E8B  00F1               	movwf	isdigit@c
  2140  0E8C  01F0               	clrf	_isdigit$342
  2141  0E8D  303A               	movlw	58
  2142  0E8E  0271               	subwf	isdigit@c,w
  2143  0E8F  1803               	skipnc
  2144  0E90  2E97               	goto	l1270
  2145  0E91  3030               	movlw	48
  2146  0E92  0271               	subwf	isdigit@c,w
  2147  0E93  1C03               	skipc
  2148  0E94  2E97               	goto	l1270
  2149  0E95  01F0               	clrf	_isdigit$342
  2150  0E96  0AF0               	incf	_isdigit$342,f
  2151  0E97                     l1270:	
  2152  0E97  0C70               	rrf	_isdigit$342,w
  2153  0E98  0008               	return
  2154  0E99                     __end_of_isdigit:	
  2155                           
  2156                           	psect	text5
  2157  0005                     __ptext5:	
  2158 ;; *************** function ___wmul *****************
  2159 ;; Defined at:
  2160 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  multiplier      2    0[COMMON] unsigned int 
  2163 ;;  multiplicand    2    2[COMMON] unsigned int 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  product         2    4[COMMON] unsigned int 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  2    0[COMMON] unsigned int 
  2168 ;; Registers used:
  2169 ;;		wreg, status,2, status,0
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2175 ;;      Params:         4       0       0       0       0
  2176 ;;      Locals:         2       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0
  2178 ;;      Totals:         6       0       0       0       0
  2179 ;;Total ram usage:        6 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_sprintf
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           
  2189                           ;psect for function ___wmul
  2190  0005                     ___wmul:	
  2191                           
  2192                           ;incstack = 0
  2193                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2194  0005  01F4               	clrf	___wmul@product
  2195  0006  01F5               	clrf	___wmul@product+1
  2196  0007                     l1276:	
  2197  0007  1C70               	btfss	___wmul@multiplier,0
  2198  0008  280F               	goto	l237
  2199  0009  0872               	movf	___wmul@multiplicand,w
  2200  000A  07F4               	addwf	___wmul@product,f
  2201  000B  1803               	skipnc
  2202  000C  0AF5               	incf	___wmul@product+1,f
  2203  000D  0873               	movf	___wmul@multiplicand+1,w
  2204  000E  07F5               	addwf	___wmul@product+1,f
  2205  000F                     l237:	
  2206  000F  3001               	movlw	1
  2207  0010                     u1845:	
  2208  0010  1003               	clrc
  2209  0011  0DF2               	rlf	___wmul@multiplicand,f
  2210  0012  0DF3               	rlf	___wmul@multiplicand+1,f
  2211  0013  3EFF               	addlw	-1
  2212  0014  1D03               	skipz
  2213  0015  2810               	goto	u1845
  2214  0016  3001               	movlw	1
  2215  0017                     u1855:	
  2216  0017  1003               	clrc
  2217  0018  0CF1               	rrf	___wmul@multiplier+1,f
  2218  0019  0CF0               	rrf	___wmul@multiplier,f
  2219  001A  3EFF               	addlw	-1
  2220  001B  1D03               	skipz
  2221  001C  2817               	goto	u1855
  2222  001D  0870               	movf	___wmul@multiplier,w
  2223  001E  0471               	iorwf	___wmul@multiplier+1,w
  2224  001F  1D03               	btfss	3,2
  2225  0020  2807               	goto	l1276
  2226  0021  0875               	movf	___wmul@product+1,w
  2227  0022  00F1               	movwf	?___wmul+1
  2228  0023  0874               	movf	___wmul@product,w
  2229  0024  00F0               	movwf	?___wmul
  2230  0025  0008               	return
  2231  0026                     __end_of___wmul:	
  2232                           
  2233                           	psect	text6
  2234  0F55                     __ptext6:	
  2235 ;; *************** function ___llmod *****************
  2236 ;; Defined at:
  2237 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  divisor         4    0[BANK0 ] unsigned long 
  2240 ;;  dividend        4    4[BANK0 ] unsigned long 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  counter         1    9[BANK0 ] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  4    0[BANK0 ] unsigned long 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2252 ;;      Params:         0       8       0       0       0
  2253 ;;      Locals:         0       1       0       0       0
  2254 ;;      Temps:          0       1       0       0       0
  2255 ;;      Totals:         0      10       0       0       0
  2256 ;;Total ram usage:       10 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_sprintf
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function ___llmod
  2267  0F55                     ___llmod:	
  2268                           
  2269                           ;incstack = 0
  2270                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2271  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0F56  1303               	bcf	3,6	;RP1=0, select bank0
  2273  0F57  0823               	movf	___llmod@divisor+3,w
  2274  0F58  0422               	iorwf	___llmod@divisor+2,w
  2275  0F59  0421               	iorwf	___llmod@divisor+1,w
  2276  0F5A  0420               	iorwf	___llmod@divisor,w
  2277  0F5B  1903               	skipnz
  2278  0F5C  2F9A               	goto	l1398
  2279  0F5D  01A9               	clrf	___llmod@counter
  2280  0F5E  0AA9               	incf	___llmod@counter,f
  2281  0F5F                     l1388:	
  2282  0F5F  1BA3               	btfsc	___llmod@divisor+3,7
  2283  0F60  2F6F               	goto	l1390
  2284  0F61  3001               	movlw	1
  2285  0F62  00A8               	movwf	??___llmod
  2286  0F63                     u2195:	
  2287  0F63  1003               	clrc
  2288  0F64  0DA0               	rlf	___llmod@divisor,f
  2289  0F65  0DA1               	rlf	___llmod@divisor+1,f
  2290  0F66  0DA2               	rlf	___llmod@divisor+2,f
  2291  0F67  0DA3               	rlf	___llmod@divisor+3,f
  2292  0F68  0BA8               	decfsz	??___llmod,f
  2293  0F69  2F63               	goto	u2195
  2294  0F6A  3001               	movlw	1
  2295  0F6B  00A8               	movwf	??___llmod
  2296  0F6C  0828               	movf	??___llmod,w
  2297  0F6D  07A9               	addwf	___llmod@counter,f
  2298  0F6E  2F5F               	goto	l1388
  2299  0F6F                     l1390:	
  2300  0F6F  0823               	movf	___llmod@divisor+3,w
  2301  0F70  0227               	subwf	___llmod@dividend+3,w
  2302  0F71  1D03               	skipz
  2303  0F72  2F7D               	goto	u2215
  2304  0F73  0822               	movf	___llmod@divisor+2,w
  2305  0F74  0226               	subwf	___llmod@dividend+2,w
  2306  0F75  1D03               	skipz
  2307  0F76  2F7D               	goto	u2215
  2308  0F77  0821               	movf	___llmod@divisor+1,w
  2309  0F78  0225               	subwf	___llmod@dividend+1,w
  2310  0F79  1D03               	skipz
  2311  0F7A  2F7D               	goto	u2215
  2312  0F7B  0820               	movf	___llmod@divisor,w
  2313  0F7C  0224               	subwf	___llmod@dividend,w
  2314  0F7D                     u2215:	
  2315  0F7D  1C03               	skipc
  2316  0F7E  2F8D               	goto	l1394
  2317  0F7F  0820               	movf	___llmod@divisor,w
  2318  0F80  02A4               	subwf	___llmod@dividend,f
  2319  0F81  0821               	movf	___llmod@divisor+1,w
  2320  0F82  1C03               	skipc
  2321  0F83  0F21               	incfsz	___llmod@divisor+1,w
  2322  0F84  02A5               	subwf	___llmod@dividend+1,f
  2323  0F85  0822               	movf	___llmod@divisor+2,w
  2324  0F86  1C03               	skipc
  2325  0F87  0F22               	incfsz	___llmod@divisor+2,w
  2326  0F88  02A6               	subwf	___llmod@dividend+2,f
  2327  0F89  0823               	movf	___llmod@divisor+3,w
  2328  0F8A  1C03               	skipc
  2329  0F8B  0F23               	incfsz	___llmod@divisor+3,w
  2330  0F8C  02A7               	subwf	___llmod@dividend+3,f
  2331  0F8D                     l1394:	
  2332  0F8D  3001               	movlw	1
  2333  0F8E                     u2225:	
  2334  0F8E  1003               	clrc
  2335  0F8F  0CA3               	rrf	___llmod@divisor+3,f
  2336  0F90  0CA2               	rrf	___llmod@divisor+2,f
  2337  0F91  0CA1               	rrf	___llmod@divisor+1,f
  2338  0F92  0CA0               	rrf	___llmod@divisor,f
  2339  0F93  3EFF               	addlw	-1
  2340  0F94  1D03               	skipz
  2341  0F95  2F8E               	goto	u2225
  2342  0F96  3001               	movlw	1
  2343  0F97  02A9               	subwf	___llmod@counter,f
  2344  0F98  1D03               	btfss	3,2
  2345  0F99  2F6F               	goto	l1390
  2346  0F9A                     l1398:	
  2347  0F9A  0827               	movf	___llmod@dividend+3,w
  2348  0F9B  00A3               	movwf	?___llmod+3
  2349  0F9C  0826               	movf	___llmod@dividend+2,w
  2350  0F9D  00A2               	movwf	?___llmod+2
  2351  0F9E  0825               	movf	___llmod@dividend+1,w
  2352  0F9F  00A1               	movwf	?___llmod+1
  2353  0FA0  0824               	movf	___llmod@dividend,w
  2354  0FA1  00A0               	movwf	?___llmod
  2355  0FA2  0008               	return
  2356  0FA3                     __end_of___llmod:	
  2357                           
  2358                           	psect	text7
  2359  0026                     __ptext7:	
  2360 ;; *************** function ___lldiv *****************
  2361 ;; Defined at:
  2362 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  divisor         4    0[COMMON] unsigned long 
  2365 ;;  dividend        4    4[COMMON] unsigned long 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  quotient        4    9[COMMON] unsigned long 
  2368 ;;  counter         1   13[COMMON] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  4    0[COMMON] unsigned long 
  2371 ;; Registers used:
  2372 ;;		wreg, status,2, status,0
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2378 ;;      Params:         8       0       0       0       0
  2379 ;;      Locals:         5       0       0       0       0
  2380 ;;      Temps:          1       0       0       0       0
  2381 ;;      Totals:        14       0       0       0       0
  2382 ;;Total ram usage:       14 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		_sprintf
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           
  2392                           ;psect for function ___lldiv
  2393  0026                     ___lldiv:	
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2397  0026  3000               	movlw	0
  2398  0027  00FC               	movwf	___lldiv@quotient+3
  2399  0028  3000               	movlw	0
  2400  0029  00FB               	movwf	___lldiv@quotient+2
  2401  002A  3000               	movlw	0
  2402  002B  00FA               	movwf	___lldiv@quotient+1
  2403  002C  3000               	movlw	0
  2404  002D  00F9               	movwf	___lldiv@quotient
  2405  002E  0873               	movf	___lldiv@divisor+3,w
  2406  002F  0472               	iorwf	___lldiv@divisor+2,w
  2407  0030  0471               	iorwf	___lldiv@divisor+1,w
  2408  0031  0470               	iorwf	___lldiv@divisor,w
  2409  0032  1903               	skipnz
  2410  0033  287B               	goto	l1378
  2411  0034  01FD               	clrf	___lldiv@counter
  2412  0035  0AFD               	incf	___lldiv@counter,f
  2413  0036                     l1364:	
  2414  0036  1BF3               	btfsc	___lldiv@divisor+3,7
  2415  0037  2846               	goto	l1366
  2416  0038  3001               	movlw	1
  2417  0039  00F8               	movwf	??___lldiv
  2418  003A                     u2125:	
  2419  003A  1003               	clrc
  2420  003B  0DF0               	rlf	___lldiv@divisor,f
  2421  003C  0DF1               	rlf	___lldiv@divisor+1,f
  2422  003D  0DF2               	rlf	___lldiv@divisor+2,f
  2423  003E  0DF3               	rlf	___lldiv@divisor+3,f
  2424  003F  0BF8               	decfsz	??___lldiv,f
  2425  0040  283A               	goto	u2125
  2426  0041  3001               	movlw	1
  2427  0042  00F8               	movwf	??___lldiv
  2428  0043  0878               	movf	??___lldiv,w
  2429  0044  07FD               	addwf	___lldiv@counter,f
  2430  0045  2836               	goto	l1364
  2431  0046                     l1366:	
  2432  0046  3001               	movlw	1
  2433  0047  00F8               	movwf	??___lldiv
  2434  0048                     u2145:	
  2435  0048  1003               	clrc
  2436  0049  0DF9               	rlf	___lldiv@quotient,f
  2437  004A  0DFA               	rlf	___lldiv@quotient+1,f
  2438  004B  0DFB               	rlf	___lldiv@quotient+2,f
  2439  004C  0DFC               	rlf	___lldiv@quotient+3,f
  2440  004D  0BF8               	decfsz	??___lldiv,f
  2441  004E  2848               	goto	u2145
  2442  004F  0873               	movf	___lldiv@divisor+3,w
  2443  0050  0277               	subwf	___lldiv@dividend+3,w
  2444  0051  1D03               	skipz
  2445  0052  285D               	goto	u2155
  2446  0053  0872               	movf	___lldiv@divisor+2,w
  2447  0054  0276               	subwf	___lldiv@dividend+2,w
  2448  0055  1D03               	skipz
  2449  0056  285D               	goto	u2155
  2450  0057  0871               	movf	___lldiv@divisor+1,w
  2451  0058  0275               	subwf	___lldiv@dividend+1,w
  2452  0059  1D03               	skipz
  2453  005A  285D               	goto	u2155
  2454  005B  0870               	movf	___lldiv@divisor,w
  2455  005C  0274               	subwf	___lldiv@dividend,w
  2456  005D                     u2155:	
  2457  005D  1C03               	skipc
  2458  005E  286E               	goto	l1374
  2459  005F  0870               	movf	___lldiv@divisor,w
  2460  0060  02F4               	subwf	___lldiv@dividend,f
  2461  0061  0871               	movf	___lldiv@divisor+1,w
  2462  0062  1C03               	skipc
  2463  0063  0F71               	incfsz	___lldiv@divisor+1,w
  2464  0064  02F5               	subwf	___lldiv@dividend+1,f
  2465  0065  0872               	movf	___lldiv@divisor+2,w
  2466  0066  1C03               	skipc
  2467  0067  0F72               	incfsz	___lldiv@divisor+2,w
  2468  0068  02F6               	subwf	___lldiv@dividend+2,f
  2469  0069  0873               	movf	___lldiv@divisor+3,w
  2470  006A  1C03               	skipc
  2471  006B  0F73               	incfsz	___lldiv@divisor+3,w
  2472  006C  02F7               	subwf	___lldiv@dividend+3,f
  2473  006D  1479               	bsf	___lldiv@quotient,0
  2474  006E                     l1374:	
  2475  006E  3001               	movlw	1
  2476  006F                     u2165:	
  2477  006F  1003               	clrc
  2478  0070  0CF3               	rrf	___lldiv@divisor+3,f
  2479  0071  0CF2               	rrf	___lldiv@divisor+2,f
  2480  0072  0CF1               	rrf	___lldiv@divisor+1,f
  2481  0073  0CF0               	rrf	___lldiv@divisor,f
  2482  0074  3EFF               	addlw	-1
  2483  0075  1D03               	skipz
  2484  0076  286F               	goto	u2165
  2485  0077  3001               	movlw	1
  2486  0078  02FD               	subwf	___lldiv@counter,f
  2487  0079  1D03               	btfss	3,2
  2488  007A  2846               	goto	l1366
  2489  007B                     l1378:	
  2490  007B  087C               	movf	___lldiv@quotient+3,w
  2491  007C  00F3               	movwf	?___lldiv+3
  2492  007D  087B               	movf	___lldiv@quotient+2,w
  2493  007E  00F2               	movwf	?___lldiv+2
  2494  007F  087A               	movf	___lldiv@quotient+1,w
  2495  0080  00F1               	movwf	?___lldiv+1
  2496  0081  0879               	movf	___lldiv@quotient,w
  2497  0082  00F0               	movwf	?___lldiv
  2498  0083  0008               	return
  2499  0084                     __end_of___lldiv:	
  2500                           
  2501                           	psect	text8
  2502  0EF8                     __ptext8:	
  2503 ;; *************** function ___lltoft *****************
  2504 ;; Defined at:
  2505 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  c               4    8[COMMON] unsigned long 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  exp             1   13[COMMON] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  3    8[COMMON] float 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, pclath, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2519 ;;      Params:         4       0       0       0       0
  2520 ;;      Locals:         1       0       0       0       0
  2521 ;;      Temps:          1       0       0       0       0
  2522 ;;      Totals:         6       0       0       0       0
  2523 ;;Total ram usage:        6 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    1
  2526 ;; This function calls:
  2527 ;;		___ftpack
  2528 ;; This function is called by:
  2529 ;;		_ftoa
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function ___lltoft
  2535  0EF8                     ___lltoft:	
  2536                           
  2537                           ;incstack = 0
  2538                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  2539  0EF8  308E               	movlw	142
  2540  0EF9  00FC               	movwf	??___lltoft
  2541  0EFA  087C               	movf	??___lltoft,w
  2542  0EFB  00FD               	movwf	___lltoft@exp
  2543  0EFC                     l1674:	
  2544  0EFC  30FF               	movlw	255
  2545  0EFD  057B               	andwf	___lltoft@c+3,w
  2546  0EFE  1903               	btfsc	3,2
  2547  0EFF  2F0E               	goto	l1676
  2548  0F00  3001               	movlw	1
  2549  0F01                     u2835:	
  2550  0F01  1003               	clrc
  2551  0F02  0CFB               	rrf	___lltoft@c+3,f
  2552  0F03  0CFA               	rrf	___lltoft@c+2,f
  2553  0F04  0CF9               	rrf	___lltoft@c+1,f
  2554  0F05  0CF8               	rrf	___lltoft@c,f
  2555  0F06  3EFF               	addlw	-1
  2556  0F07  1D03               	skipz
  2557  0F08  2F01               	goto	u2835
  2558  0F09  3001               	movlw	1
  2559  0F0A  00FC               	movwf	??___lltoft
  2560  0F0B  087C               	movf	??___lltoft,w
  2561  0F0C  07FD               	addwf	___lltoft@exp,f
  2562  0F0D  2EFC               	goto	l1674
  2563  0F0E                     l1676:	
  2564  0F0E  0878               	movf	___lltoft@c,w
  2565  0F0F  00F0               	movwf	___ftpack@arg
  2566  0F10  0879               	movf	___lltoft@c+1,w
  2567  0F11  00F1               	movwf	___ftpack@arg+1
  2568  0F12  087A               	movf	___lltoft@c+2,w
  2569  0F13  00F2               	movwf	___ftpack@arg+2
  2570  0F14  087D               	movf	___lltoft@exp,w
  2571  0F15  00FC               	movwf	??___lltoft
  2572  0F16  087C               	movf	??___lltoft,w
  2573  0F17  00F3               	movwf	___ftpack@exp
  2574  0F18  01F4               	clrf	___ftpack@sign
  2575  0F19  120A  118A  2144   	fcall	___ftpack
  2576  0F1C  0870               	movf	?___ftpack,w
  2577  0F1D  00F8               	movwf	?___lltoft
  2578  0F1E  0871               	movf	?___ftpack+1,w
  2579  0F1F  00F9               	movwf	?___lltoft+1
  2580  0F20  0872               	movf	?___ftpack+2,w
  2581  0F21  00FA               	movwf	?___lltoft+2
  2582  0F22  0008               	return
  2583  0F23                     __end_of___lltoft:	
  2584                           
  2585                           	psect	text9
  2586  023A                     __ptext9:	
  2587 ;; *************** function ___fttol *****************
  2588 ;; Defined at:
  2589 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  f1              3   10[BANK0 ] float 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  lval            4   19[BANK0 ] unsigned long 
  2594 ;;  exp1            1   23[BANK0 ] unsigned char 
  2595 ;;  sign1           1   18[BANK0 ] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  4   10[BANK0 ] long 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2605 ;;      Params:         0       4       0       0       0
  2606 ;;      Locals:         0       6       0       0       0
  2607 ;;      Temps:          0       4       0       0       0
  2608 ;;      Totals:         0      14       0       0       0
  2609 ;;Total ram usage:       14 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; This function calls:
  2612 ;;		Nothing
  2613 ;; This function is called by:
  2614 ;;		_ftoa
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           
  2619                           ;psect for function ___fttol
  2620  023A                     ___fttol:	
  2621                           
  2622                           ;incstack = 0
  2623                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2624  023A  1283               	bcf	3,5	;RP0=0, select bank0
  2625  023B  1303               	bcf	3,6	;RP1=0, select bank0
  2626  023C  082A               	movf	___fttol@f1,w
  2627  023D  00AE               	movwf	??___fttol
  2628  023E  082B               	movf	___fttol@f1+1,w
  2629  023F  00AF               	movwf	??___fttol+1
  2630  0240  082C               	movf	___fttol@f1+2,w
  2631  0241  00B0               	movwf	??___fttol+2
  2632  0242  1003               	clrc
  2633  0243  0D2F               	rlf	??___fttol+1,w
  2634  0244  0D30               	rlf	??___fttol+2,w
  2635  0245  00B1               	movwf	??___fttol+3
  2636  0246  0831               	movf	??___fttol+3,w
  2637  0247  00B7               	movwf	___fttol@exp1
  2638  0248  0837               	movf	___fttol@exp1,w
  2639  0249  1D03               	btfss	3,2
  2640  024A  2A54               	goto	l1634
  2641  024B  3000               	movlw	0
  2642  024C  00AD               	movwf	?___fttol+3
  2643  024D  3000               	movlw	0
  2644  024E  00AC               	movwf	?___fttol+2
  2645  024F  3000               	movlw	0
  2646  0250  00AB               	movwf	?___fttol+1
  2647  0251  3000               	movlw	0
  2648  0252  00AA               	movwf	?___fttol
  2649  0253  0008               	return
  2650  0254                     l1634:	
  2651  0254  082A               	movf	___fttol@f1,w
  2652  0255  00AE               	movwf	??___fttol
  2653  0256  082B               	movf	___fttol@f1+1,w
  2654  0257  00AF               	movwf	??___fttol+1
  2655  0258  082C               	movf	___fttol@f1+2,w
  2656  0259  00B0               	movwf	??___fttol+2
  2657  025A  3017               	movlw	23
  2658  025B                     u2745:	
  2659  025B  1003               	clrc
  2660  025C  0CB0               	rrf	??___fttol+2,f
  2661  025D  0CAF               	rrf	??___fttol+1,f
  2662  025E  0CAE               	rrf	??___fttol,f
  2663  025F  3EFF               	addlw	-1
  2664  0260  1D03               	skipz
  2665  0261  2A5B               	goto	u2745
  2666  0262  082E               	movf	??___fttol,w
  2667  0263  00B1               	movwf	??___fttol+3
  2668  0264  0831               	movf	??___fttol+3,w
  2669  0265  00B2               	movwf	___fttol@sign1
  2670  0266  17AB               	bsf	___fttol@f1+1,7
  2671  0267  30FF               	movlw	255
  2672  0268  05AA               	andwf	___fttol@f1,f
  2673  0269  30FF               	movlw	255
  2674  026A  05AB               	andwf	___fttol@f1+1,f
  2675  026B  3000               	movlw	0
  2676  026C  05AC               	andwf	___fttol@f1+2,f
  2677  026D  082A               	movf	___fttol@f1,w
  2678  026E  00B3               	movwf	___fttol@lval
  2679  026F  082B               	movf	___fttol@f1+1,w
  2680  0270  00B4               	movwf	___fttol@lval+1
  2681  0271  082C               	movf	___fttol@f1+2,w
  2682  0272  00B5               	movwf	___fttol@lval+2
  2683  0273  01B6               	clrf	___fttol@lval+3
  2684  0274  308E               	movlw	142
  2685  0275  02B7               	subwf	___fttol@exp1,f
  2686  0276  1FB7               	btfss	___fttol@exp1,7
  2687  0277  2A96               	goto	l1654
  2688  0278  0837               	movf	___fttol@exp1,w
  2689  0279  3A80               	xorlw	128
  2690  027A  3E8F               	addlw	143
  2691  027B  1803               	skipnc
  2692  027C  2A86               	goto	l1652
  2693  027D  3000               	movlw	0
  2694  027E  00AD               	movwf	?___fttol+3
  2695  027F  3000               	movlw	0
  2696  0280  00AC               	movwf	?___fttol+2
  2697  0281  3000               	movlw	0
  2698  0282  00AB               	movwf	?___fttol+1
  2699  0283  3000               	movlw	0
  2700  0284  00AA               	movwf	?___fttol
  2701  0285  0008               	return
  2702  0286                     l1652:	
  2703  0286  3001               	movlw	1
  2704  0287                     u2775:	
  2705  0287  1003               	clrc
  2706  0288  0CB6               	rrf	___fttol@lval+3,f
  2707  0289  0CB5               	rrf	___fttol@lval+2,f
  2708  028A  0CB4               	rrf	___fttol@lval+1,f
  2709  028B  0CB3               	rrf	___fttol@lval,f
  2710  028C  3EFF               	addlw	-1
  2711  028D  1D03               	skipz
  2712  028E  2A87               	goto	u2775
  2713  028F  3001               	movlw	1
  2714  0290  00AE               	movwf	??___fttol
  2715  0291  082E               	movf	??___fttol,w
  2716  0292  07B7               	addwf	___fttol@exp1,f
  2717  0293  1903               	btfsc	3,2
  2718  0294  2AB1               	goto	l1662
  2719  0295  2A86               	goto	l1652
  2720  0296                     l1654:	
  2721  0296  3018               	movlw	24
  2722  0297  0237               	subwf	___fttol@exp1,w
  2723  0298  1C03               	skipc
  2724  0299  2AAE               	goto	l497
  2725  029A  3000               	movlw	0
  2726  029B  00AD               	movwf	?___fttol+3
  2727  029C  3000               	movlw	0
  2728  029D  00AC               	movwf	?___fttol+2
  2729  029E  3000               	movlw	0
  2730  029F  00AB               	movwf	?___fttol+1
  2731  02A0  3000               	movlw	0
  2732  02A1  00AA               	movwf	?___fttol
  2733  02A2  0008               	return
  2734  02A3                     l1660:	
  2735  02A3  3001               	movlw	1
  2736  02A4  00AE               	movwf	??___fttol
  2737  02A5                     u2805:	
  2738  02A5  1003               	clrc
  2739  02A6  0DB3               	rlf	___fttol@lval,f
  2740  02A7  0DB4               	rlf	___fttol@lval+1,f
  2741  02A8  0DB5               	rlf	___fttol@lval+2,f
  2742  02A9  0DB6               	rlf	___fttol@lval+3,f
  2743  02AA  0BAE               	decfsz	??___fttol,f
  2744  02AB  2AA5               	goto	u2805
  2745  02AC  3001               	movlw	1
  2746  02AD  02B7               	subwf	___fttol@exp1,f
  2747  02AE                     l497:	
  2748  02AE  0837               	movf	___fttol@exp1,w
  2749  02AF  1D03               	btfss	3,2
  2750  02B0  2AA3               	goto	l1660
  2751  02B1                     l1662:	
  2752  02B1  0832               	movf	___fttol@sign1,w
  2753  02B2  1903               	btfsc	3,2
  2754  02B3  2ABF               	goto	l1666
  2755  02B4  09B3               	comf	___fttol@lval,f
  2756  02B5  09B4               	comf	___fttol@lval+1,f
  2757  02B6  09B5               	comf	___fttol@lval+2,f
  2758  02B7  09B6               	comf	___fttol@lval+3,f
  2759  02B8  0AB3               	incf	___fttol@lval,f
  2760  02B9  1903               	skipnz
  2761  02BA  0AB4               	incf	___fttol@lval+1,f
  2762  02BB  1903               	skipnz
  2763  02BC  0AB5               	incf	___fttol@lval+2,f
  2764  02BD  1903               	skipnz
  2765  02BE  0AB6               	incf	___fttol@lval+3,f
  2766  02BF                     l1666:	
  2767  02BF  0836               	movf	___fttol@lval+3,w
  2768  02C0  00AD               	movwf	?___fttol+3
  2769  02C1  0835               	movf	___fttol@lval+2,w
  2770  02C2  00AC               	movwf	?___fttol+2
  2771  02C3  0834               	movf	___fttol@lval+1,w
  2772  02C4  00AB               	movwf	?___fttol+1
  2773  02C5  0833               	movf	___fttol@lval,w
  2774  02C6  00AA               	movwf	?___fttol
  2775  02C7  0008               	return
  2776  02C8                     __end_of___fttol:	
  2777                           
  2778                           	psect	text10
  2779  0ED7                     __ptext10:	
  2780 ;; *************** function ___ftsub *****************
  2781 ;; Defined at:
  2782 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  f2              3    7[BANK0 ] float 
  2785 ;;  f1              3   10[BANK0 ] float 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  3    7[BANK0 ] float 
  2790 ;; Registers used:
  2791 ;;		wreg, status,2, status,0, pclath, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2797 ;;      Params:         0       6       0       0       0
  2798 ;;      Locals:         0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0
  2800 ;;      Totals:         0       6       0       0       0
  2801 ;;Total ram usage:        6 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    2
  2804 ;; This function calls:
  2805 ;;		___ftadd
  2806 ;; This function is called by:
  2807 ;;		_ftoa
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           
  2812                           ;psect for function ___ftsub
  2813  0ED7                     ___ftsub:	
  2814                           
  2815                           ;incstack = 0
  2816                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  2817  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0ED9  0829               	movf	___ftsub@f2+2,w
  2820  0EDA  0428               	iorwf	___ftsub@f2+1,w
  2821  0EDB  0427               	iorwf	___ftsub@f2,w
  2822  0EDC  1903               	skipnz
  2823  0EDD  2EE0               	goto	l1624
  2824  0EDE  3080               	movlw	128
  2825  0EDF  06A9               	xorwf	___ftsub@f2+2,f
  2826  0EE0                     l1624:	
  2827  0EE0  082A               	movf	___ftsub@f1,w
  2828  0EE1  00F8               	movwf	___ftadd@f1
  2829  0EE2  082B               	movf	___ftsub@f1+1,w
  2830  0EE3  00F9               	movwf	___ftadd@f1+1
  2831  0EE4  082C               	movf	___ftsub@f1+2,w
  2832  0EE5  00FA               	movwf	___ftadd@f1+2
  2833  0EE6  0827               	movf	___ftsub@f2,w
  2834  0EE7  00FB               	movwf	___ftadd@f2
  2835  0EE8  0828               	movf	___ftsub@f2+1,w
  2836  0EE9  00FC               	movwf	___ftadd@f2+1
  2837  0EEA  0829               	movf	___ftsub@f2+2,w
  2838  0EEB  00FD               	movwf	___ftadd@f2+2
  2839  0EEC  120A  118A  2453   	fcall	___ftadd
  2840  0EEF  0878               	movf	?___ftadd,w
  2841  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  2842  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0EF2  00A7               	movwf	?___ftsub
  2844  0EF3  0879               	movf	?___ftadd+1,w
  2845  0EF4  00A8               	movwf	?___ftsub+1
  2846  0EF5  087A               	movf	?___ftadd+2,w
  2847  0EF6  00A9               	movwf	?___ftsub+2
  2848  0EF7  0008               	return
  2849  0EF8                     __end_of___ftsub:	
  2850                           
  2851                           	psect	text11
  2852  0453                     __ptext11:	
  2853 ;; *************** function ___ftadd *****************
  2854 ;; Defined at:
  2855 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  f1              3    8[COMMON] float 
  2858 ;;  f2              3   11[COMMON] float 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  exp1            1    6[BANK0 ] unsigned char 
  2861 ;;  exp2            1    5[BANK0 ] unsigned char 
  2862 ;;  sign            1    4[BANK0 ] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  3    8[COMMON] float 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0, pclath, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2872 ;;      Params:         6       0       0       0       0
  2873 ;;      Locals:         0       3       0       0       0
  2874 ;;      Temps:          0       4       0       0       0
  2875 ;;      Totals:         6       7       0       0       0
  2876 ;;Total ram usage:       13 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    1
  2879 ;; This function calls:
  2880 ;;		___ftpack
  2881 ;; This function is called by:
  2882 ;;		___ftsub
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           
  2887                           ;psect for function ___ftadd
  2888  0453                     ___ftadd:	
  2889                           
  2890                           ;incstack = 0
  2891                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2892  0453  0878               	movf	___ftadd@f1,w
  2893  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2894  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2895  0456  00A0               	movwf	??___ftadd
  2896  0457  0879               	movf	___ftadd@f1+1,w
  2897  0458  00A1               	movwf	??___ftadd+1
  2898  0459  087A               	movf	___ftadd@f1+2,w
  2899  045A  00A2               	movwf	??___ftadd+2
  2900  045B  1003               	clrc
  2901  045C  0D21               	rlf	??___ftadd+1,w
  2902  045D  0D22               	rlf	??___ftadd+2,w
  2903  045E  00A3               	movwf	??___ftadd+3
  2904  045F  0823               	movf	??___ftadd+3,w
  2905  0460  00A6               	movwf	___ftadd@exp1
  2906  0461  087B               	movf	___ftadd@f2,w
  2907  0462  00A0               	movwf	??___ftadd
  2908  0463  087C               	movf	___ftadd@f2+1,w
  2909  0464  00A1               	movwf	??___ftadd+1
  2910  0465  087D               	movf	___ftadd@f2+2,w
  2911  0466  00A2               	movwf	??___ftadd+2
  2912  0467  1003               	clrc
  2913  0468  0D21               	rlf	??___ftadd+1,w
  2914  0469  0D22               	rlf	??___ftadd+2,w
  2915  046A  00A3               	movwf	??___ftadd+3
  2916  046B  0823               	movf	??___ftadd+3,w
  2917  046C  00A5               	movwf	___ftadd@exp2
  2918  046D  0826               	movf	___ftadd@exp1,w
  2919  046E  1903               	btfsc	3,2
  2920  046F  2C7C               	goto	l1294
  2921  0470  0825               	movf	___ftadd@exp2,w
  2922  0471  0226               	subwf	___ftadd@exp1,w
  2923  0472  1803               	skipnc
  2924  0473  2C83               	goto	l1298
  2925  0474  0326               	decf	___ftadd@exp1,w
  2926  0475  3AFF               	xorlw	255
  2927  0476  0725               	addwf	___ftadd@exp2,w
  2928  0477  00A0               	movwf	??___ftadd
  2929  0478  3019               	movlw	25
  2930  0479  0220               	subwf	??___ftadd,w
  2931  047A  1C03               	skipc
  2932  047B  2C83               	goto	l1298
  2933  047C                     l1294:	
  2934  047C  087B               	movf	___ftadd@f2,w
  2935  047D  00F8               	movwf	?___ftadd
  2936  047E  087C               	movf	___ftadd@f2+1,w
  2937  047F  00F9               	movwf	?___ftadd+1
  2938  0480  087D               	movf	___ftadd@f2+2,w
  2939  0481  00FA               	movwf	?___ftadd+2
  2940  0482  0008               	return
  2941  0483                     l1298:	
  2942  0483  0825               	movf	___ftadd@exp2,w
  2943  0484  1903               	btfsc	3,2
  2944  0485  0008               	return
  2945  0486  0826               	movf	___ftadd@exp1,w
  2946  0487  0225               	subwf	___ftadd@exp2,w
  2947  0488  1803               	skipnc
  2948  0489  2C92               	goto	l1304
  2949  048A  0325               	decf	___ftadd@exp2,w
  2950  048B  3AFF               	xorlw	255
  2951  048C  0726               	addwf	___ftadd@exp1,w
  2952  048D  00A0               	movwf	??___ftadd
  2953  048E  3019               	movlw	25
  2954  048F  0220               	subwf	??___ftadd,w
  2955  0490  1803               	btfsc	3,0
  2956  0491  0008               	return
  2957  0492                     l1304:	
  2958  0492  3006               	movlw	6
  2959  0493  00A0               	movwf	??___ftadd
  2960  0494  0820               	movf	??___ftadd,w
  2961  0495  00A4               	movwf	___ftadd@sign
  2962  0496  1BFA               	btfsc	___ftadd@f1+2,7
  2963  0497  17A4               	bsf	___ftadd@sign,7
  2964  0498  1BFD               	btfsc	___ftadd@f2+2,7
  2965  0499  1724               	bsf	___ftadd@sign,6
  2966  049A  17F9               	bsf	___ftadd@f1+1,7
  2967  049B  30FF               	movlw	255
  2968  049C  05F8               	andwf	___ftadd@f1,f
  2969  049D  30FF               	movlw	255
  2970  049E  05F9               	andwf	___ftadd@f1+1,f
  2971  049F  3000               	movlw	0
  2972  04A0  05FA               	andwf	___ftadd@f1+2,f
  2973  04A1  17FC               	bsf	___ftadd@f2+1,7
  2974  04A2  30FF               	movlw	255
  2975  04A3  05FB               	andwf	___ftadd@f2,f
  2976  04A4  30FF               	movlw	255
  2977  04A5  05FC               	andwf	___ftadd@f2+1,f
  2978  04A6  3000               	movlw	0
  2979  04A7  05FD               	andwf	___ftadd@f2+2,f
  2980  04A8  0825               	movf	___ftadd@exp2,w
  2981  04A9  0226               	subwf	___ftadd@exp1,w
  2982  04AA  1803               	skipnc
  2983  04AB  2CD2               	goto	l1326
  2984  04AC                     l1316:	
  2985  04AC  3001               	movlw	1
  2986  04AD                     u1965:	
  2987  04AD  1003               	clrc
  2988  04AE  0DFB               	rlf	___ftadd@f2,f
  2989  04AF  0DFC               	rlf	___ftadd@f2+1,f
  2990  04B0  0DFD               	rlf	___ftadd@f2+2,f
  2991  04B1  3EFF               	addlw	-1
  2992  04B2  1D03               	skipz
  2993  04B3  2CAD               	goto	u1965
  2994  04B4  3001               	movlw	1
  2995  04B5  02A5               	subwf	___ftadd@exp2,f
  2996  04B6  0825               	movf	___ftadd@exp2,w
  2997  04B7  0626               	xorwf	___ftadd@exp1,w
  2998  04B8  1903               	skipnz
  2999  04B9  2CCD               	goto	l1324
  3000  04BA  3001               	movlw	1
  3001  04BB  02A4               	subwf	___ftadd@sign,f
  3002  04BC  0824               	movf	___ftadd@sign,w
  3003  04BD  3907               	andlw	7
  3004  04BE  1903               	btfsc	3,2
  3005  04BF  2CCD               	goto	l1324
  3006  04C0  2CAC               	goto	l1316
  3007  04C1                     l1322:	
  3008  04C1  3001               	movlw	1
  3009  04C2                     u1995:	
  3010  04C2  1003               	clrc
  3011  04C3  0CFA               	rrf	___ftadd@f1+2,f
  3012  04C4  0CF9               	rrf	___ftadd@f1+1,f
  3013  04C5  0CF8               	rrf	___ftadd@f1,f
  3014  04C6  3EFF               	addlw	-1
  3015  04C7  1D03               	skipz
  3016  04C8  2CC2               	goto	u1995
  3017  04C9  3001               	movlw	1
  3018  04CA  00A0               	movwf	??___ftadd
  3019  04CB  0820               	movf	??___ftadd,w
  3020  04CC  07A6               	addwf	___ftadd@exp1,f
  3021  04CD                     l1324:	
  3022  04CD  0826               	movf	___ftadd@exp1,w
  3023  04CE  0625               	xorwf	___ftadd@exp2,w
  3024  04CF  1903               	btfsc	3,2
  3025  04D0  2CFB               	goto	l429
  3026  04D1  2CC1               	goto	l1322
  3027  04D2                     l1326:	
  3028  04D2  0826               	movf	___ftadd@exp1,w
  3029  04D3  0225               	subwf	___ftadd@exp2,w
  3030  04D4  1803               	skipnc
  3031  04D5  2CFB               	goto	l429
  3032  04D6                     l1328:	
  3033  04D6  3001               	movlw	1
  3034  04D7                     u2025:	
  3035  04D7  1003               	clrc
  3036  04D8  0DF8               	rlf	___ftadd@f1,f
  3037  04D9  0DF9               	rlf	___ftadd@f1+1,f
  3038  04DA  0DFA               	rlf	___ftadd@f1+2,f
  3039  04DB  3EFF               	addlw	-1
  3040  04DC  1D03               	skipz
  3041  04DD  2CD7               	goto	u2025
  3042  04DE  3001               	movlw	1
  3043  04DF  02A6               	subwf	___ftadd@exp1,f
  3044  04E0  0825               	movf	___ftadd@exp2,w
  3045  04E1  0626               	xorwf	___ftadd@exp1,w
  3046  04E2  1903               	skipnz
  3047  04E3  2CF7               	goto	l1336
  3048  04E4  3001               	movlw	1
  3049  04E5  02A4               	subwf	___ftadd@sign,f
  3050  04E6  0824               	movf	___ftadd@sign,w
  3051  04E7  3907               	andlw	7
  3052  04E8  1903               	btfsc	3,2
  3053  04E9  2CF7               	goto	l1336
  3054  04EA  2CD6               	goto	l1328
  3055  04EB                     l1334:	
  3056  04EB  3001               	movlw	1
  3057  04EC                     u2055:	
  3058  04EC  1003               	clrc
  3059  04ED  0CFD               	rrf	___ftadd@f2+2,f
  3060  04EE  0CFC               	rrf	___ftadd@f2+1,f
  3061  04EF  0CFB               	rrf	___ftadd@f2,f
  3062  04F0  3EFF               	addlw	-1
  3063  04F1  1D03               	skipz
  3064  04F2  2CEC               	goto	u2055
  3065  04F3  3001               	movlw	1
  3066  04F4  00A0               	movwf	??___ftadd
  3067  04F5  0820               	movf	??___ftadd,w
  3068  04F6  07A5               	addwf	___ftadd@exp2,f
  3069  04F7                     l1336:	
  3070  04F7  0826               	movf	___ftadd@exp1,w
  3071  04F8  0625               	xorwf	___ftadd@exp2,w
  3072  04F9  1D03               	skipz
  3073  04FA  2CEB               	goto	l1334
  3074  04FB                     l429:	
  3075  04FB  1FA4               	btfss	___ftadd@sign,7
  3076  04FC  2D0D               	goto	l1340
  3077  04FD  30FF               	movlw	255
  3078  04FE  06F8               	xorwf	___ftadd@f1,f
  3079  04FF  30FF               	movlw	255
  3080  0500  06F9               	xorwf	___ftadd@f1+1,f
  3081  0501  30FF               	movlw	255
  3082  0502  06FA               	xorwf	___ftadd@f1+2,f
  3083  0503  3001               	movlw	1
  3084  0504  07F8               	addwf	___ftadd@f1,f
  3085  0505  3000               	movlw	0
  3086  0506  1803               	skipnc
  3087  0507  3001               	movlw	1
  3088  0508  07F9               	addwf	___ftadd@f1+1,f
  3089  0509  3000               	movlw	0
  3090  050A  1803               	skipnc
  3091  050B  3001               	movlw	1
  3092  050C  07FA               	addwf	___ftadd@f1+2,f
  3093  050D                     l1340:	
  3094  050D  1F24               	btfss	___ftadd@sign,6
  3095  050E  2D1F               	goto	l1344
  3096  050F  30FF               	movlw	255
  3097  0510  06FB               	xorwf	___ftadd@f2,f
  3098  0511  30FF               	movlw	255
  3099  0512  06FC               	xorwf	___ftadd@f2+1,f
  3100  0513  30FF               	movlw	255
  3101  0514  06FD               	xorwf	___ftadd@f2+2,f
  3102  0515  3001               	movlw	1
  3103  0516  07FB               	addwf	___ftadd@f2,f
  3104  0517  3000               	movlw	0
  3105  0518  1803               	skipnc
  3106  0519  3001               	movlw	1
  3107  051A  07FC               	addwf	___ftadd@f2+1,f
  3108  051B  3000               	movlw	0
  3109  051C  1803               	skipnc
  3110  051D  3001               	movlw	1
  3111  051E  07FD               	addwf	___ftadd@f2+2,f
  3112  051F                     l1344:	
  3113  051F  01A4               	clrf	___ftadd@sign
  3114  0520  0878               	movf	___ftadd@f1,w
  3115  0521  07FB               	addwf	___ftadd@f2,f
  3116  0522  0879               	movf	___ftadd@f1+1,w
  3117  0523  1103               	clrz
  3118  0524  1803               	skipnc
  3119  0525  0A79               	incf	___ftadd@f1+1,w
  3120  0526  1D03               	btfss	3,2
  3121  0527  07FC               	addwf	___ftadd@f2+1,f
  3122  0528  087A               	movf	___ftadd@f1+2,w
  3123  0529  1103               	clrz
  3124  052A  1803               	skipnc
  3125  052B  0A7A               	incf	___ftadd@f1+2,w
  3126  052C  1D03               	btfss	3,2
  3127  052D  07FD               	addwf	___ftadd@f2+2,f
  3128  052E  1FFD               	btfss	___ftadd@f2+2,7
  3129  052F  2D42               	goto	l1354
  3130  0530  30FF               	movlw	255
  3131  0531  06FB               	xorwf	___ftadd@f2,f
  3132  0532  30FF               	movlw	255
  3133  0533  06FC               	xorwf	___ftadd@f2+1,f
  3134  0534  30FF               	movlw	255
  3135  0535  06FD               	xorwf	___ftadd@f2+2,f
  3136  0536  3001               	movlw	1
  3137  0537  07FB               	addwf	___ftadd@f2,f
  3138  0538  3000               	movlw	0
  3139  0539  1803               	skipnc
  3140  053A  3001               	movlw	1
  3141  053B  07FC               	addwf	___ftadd@f2+1,f
  3142  053C  3000               	movlw	0
  3143  053D  1803               	skipnc
  3144  053E  3001               	movlw	1
  3145  053F  07FD               	addwf	___ftadd@f2+2,f
  3146  0540  01A4               	clrf	___ftadd@sign
  3147  0541  0AA4               	incf	___ftadd@sign,f
  3148  0542                     l1354:	
  3149  0542  087B               	movf	___ftadd@f2,w
  3150  0543  00F0               	movwf	___ftpack@arg
  3151  0544  087C               	movf	___ftadd@f2+1,w
  3152  0545  00F1               	movwf	___ftpack@arg+1
  3153  0546  087D               	movf	___ftadd@f2+2,w
  3154  0547  00F2               	movwf	___ftpack@arg+2
  3155  0548  0826               	movf	___ftadd@exp1,w
  3156  0549  00A0               	movwf	??___ftadd
  3157  054A  0820               	movf	??___ftadd,w
  3158  054B  00F3               	movwf	___ftpack@exp
  3159  054C  0824               	movf	___ftadd@sign,w
  3160  054D  00A1               	movwf	??___ftadd+1
  3161  054E  0821               	movf	??___ftadd+1,w
  3162  054F  00F4               	movwf	___ftpack@sign
  3163  0550  120A  118A  2144   	fcall	___ftpack
  3164  0553  0870               	movf	?___ftpack,w
  3165  0554  00F8               	movwf	?___ftadd
  3166  0555  0871               	movf	?___ftpack+1,w
  3167  0556  00F9               	movwf	?___ftadd+1
  3168  0557  0872               	movf	?___ftpack+2,w
  3169  0558  00FA               	movwf	?___ftadd+2
  3170  0559  0008               	return
  3171  055A                     __end_of___ftadd:	
  3172                           
  3173                           	psect	text12
  3174  0E50                     __ptext12:	
  3175 ;; *************** function ___ftneg *****************
  3176 ;; Defined at:
  3177 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  f1              3    0[COMMON] float 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;		None
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  3    0[COMMON] float 
  3184 ;; Registers used:
  3185 ;;		wreg
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3191 ;;      Params:         3       0       0       0       0
  3192 ;;      Locals:         0       0       0       0       0
  3193 ;;      Temps:          0       0       0       0       0
  3194 ;;      Totals:         3       0       0       0       0
  3195 ;;Total ram usage:        3 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_ftoa
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function ___ftneg
  3206  0E50                     ___ftneg:	
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in ___ftneg: [wreg]
  3210  0E50  0872               	movf	___ftneg@f1+2,w
  3211  0E51  0471               	iorwf	___ftneg@f1+1,w
  3212  0E52  0470               	iorwf	___ftneg@f1,w
  3213  0E53  1903               	skipnz
  3214  0E54  0008               	return
  3215  0E55  3080               	movlw	128
  3216  0E56  06F2               	xorwf	___ftneg@f1+2,f
  3217  0E57  0008               	return
  3218  0E58                     __end_of___ftneg:	
  3219                           
  3220                           	psect	text13
  3221  0382                     __ptext13:	
  3222 ;; *************** function ___ftmul *****************
  3223 ;; Defined at:
  3224 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  f1              3    8[COMMON] float 
  3227 ;;  f2              3   11[COMMON] float 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  f3_as_produc    3    5[BANK0 ] unsigned um
  3230 ;;  sign            1    9[BANK0 ] unsigned char 
  3231 ;;  cntr            1    8[BANK0 ] unsigned char 
  3232 ;;  exp             1    4[BANK0 ] unsigned char 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  3    8[COMMON] float 
  3235 ;; Registers used:
  3236 ;;		wreg, status,2, status,0, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3242 ;;      Params:         6       0       0       0       0
  3243 ;;      Locals:         0       6       0       0       0
  3244 ;;      Temps:          0       4       0       0       0
  3245 ;;      Totals:         6      10       0       0       0
  3246 ;;Total ram usage:       16 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    1
  3249 ;; This function calls:
  3250 ;;		___ftpack
  3251 ;; This function is called by:
  3252 ;;		_ftoa
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           
  3257                           ;psect for function ___ftmul
  3258  0382                     ___ftmul:	
  3259                           
  3260                           ;incstack = 0
  3261                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3262  0382  0878               	movf	___ftmul@f1,w
  3263  0383  1283               	bcf	3,5	;RP0=0, select bank0
  3264  0384  1303               	bcf	3,6	;RP1=0, select bank0
  3265  0385  00A0               	movwf	??___ftmul
  3266  0386  0879               	movf	___ftmul@f1+1,w
  3267  0387  00A1               	movwf	??___ftmul+1
  3268  0388  087A               	movf	___ftmul@f1+2,w
  3269  0389  00A2               	movwf	??___ftmul+2
  3270  038A  1003               	clrc
  3271  038B  0D21               	rlf	??___ftmul+1,w
  3272  038C  0D22               	rlf	??___ftmul+2,w
  3273  038D  00A3               	movwf	??___ftmul+3
  3274  038E  0823               	movf	??___ftmul+3,w
  3275  038F  00A4               	movwf	___ftmul@exp
  3276  0390  0824               	movf	___ftmul@exp,w
  3277  0391  1D03               	btfss	3,2
  3278  0392  2B9A               	goto	l1568
  3279  0393  3000               	movlw	0
  3280  0394  00F8               	movwf	?___ftmul
  3281  0395  3000               	movlw	0
  3282  0396  00F9               	movwf	?___ftmul+1
  3283  0397  3000               	movlw	0
  3284  0398  00FA               	movwf	?___ftmul+2
  3285  0399  0008               	return
  3286  039A                     l1568:	
  3287  039A  087B               	movf	___ftmul@f2,w
  3288  039B  00A0               	movwf	??___ftmul
  3289  039C  087C               	movf	___ftmul@f2+1,w
  3290  039D  00A1               	movwf	??___ftmul+1
  3291  039E  087D               	movf	___ftmul@f2+2,w
  3292  039F  00A2               	movwf	??___ftmul+2
  3293  03A0  1003               	clrc
  3294  03A1  0D21               	rlf	??___ftmul+1,w
  3295  03A2  0D22               	rlf	??___ftmul+2,w
  3296  03A3  00A3               	movwf	??___ftmul+3
  3297  03A4  0823               	movf	??___ftmul+3,w
  3298  03A5  00A9               	movwf	___ftmul@sign
  3299  03A6  0829               	movf	___ftmul@sign,w
  3300  03A7  1D03               	btfss	3,2
  3301  03A8  2BB0               	goto	l1574
  3302  03A9  3000               	movlw	0
  3303  03AA  00F8               	movwf	?___ftmul
  3304  03AB  3000               	movlw	0
  3305  03AC  00F9               	movwf	?___ftmul+1
  3306  03AD  3000               	movlw	0
  3307  03AE  00FA               	movwf	?___ftmul+2
  3308  03AF  0008               	return
  3309  03B0                     l1574:	
  3310  03B0  0829               	movf	___ftmul@sign,w
  3311  03B1  3E7B               	addlw	123
  3312  03B2  00A0               	movwf	??___ftmul
  3313  03B3  0820               	movf	??___ftmul,w
  3314  03B4  07A4               	addwf	___ftmul@exp,f
  3315  03B5  0878               	movf	___ftmul@f1,w
  3316  03B6  00A0               	movwf	??___ftmul
  3317  03B7  0879               	movf	___ftmul@f1+1,w
  3318  03B8  00A1               	movwf	??___ftmul+1
  3319  03B9  087A               	movf	___ftmul@f1+2,w
  3320  03BA  00A2               	movwf	??___ftmul+2
  3321  03BB  3010               	movlw	16
  3322  03BC                     u2595:	
  3323  03BC  1003               	clrc
  3324  03BD  0CA2               	rrf	??___ftmul+2,f
  3325  03BE  0CA1               	rrf	??___ftmul+1,f
  3326  03BF  0CA0               	rrf	??___ftmul,f
  3327  03C0  3EFF               	addlw	-1
  3328  03C1  1D03               	skipz
  3329  03C2  2BBC               	goto	u2595
  3330  03C3  0820               	movf	??___ftmul,w
  3331  03C4  00A3               	movwf	??___ftmul+3
  3332  03C5  0823               	movf	??___ftmul+3,w
  3333  03C6  00A9               	movwf	___ftmul@sign
  3334  03C7  087B               	movf	___ftmul@f2,w
  3335  03C8  00A0               	movwf	??___ftmul
  3336  03C9  087C               	movf	___ftmul@f2+1,w
  3337  03CA  00A1               	movwf	??___ftmul+1
  3338  03CB  087D               	movf	___ftmul@f2+2,w
  3339  03CC  00A2               	movwf	??___ftmul+2
  3340  03CD  3010               	movlw	16
  3341  03CE                     u2605:	
  3342  03CE  1003               	clrc
  3343  03CF  0CA2               	rrf	??___ftmul+2,f
  3344  03D0  0CA1               	rrf	??___ftmul+1,f
  3345  03D1  0CA0               	rrf	??___ftmul,f
  3346  03D2  3EFF               	addlw	-1
  3347  03D3  1D03               	skipz
  3348  03D4  2BCE               	goto	u2605
  3349  03D5  0820               	movf	??___ftmul,w
  3350  03D6  00A3               	movwf	??___ftmul+3
  3351  03D7  0823               	movf	??___ftmul+3,w
  3352  03D8  06A9               	xorwf	___ftmul@sign,f
  3353  03D9  3080               	movlw	128
  3354  03DA  00A0               	movwf	??___ftmul
  3355  03DB  0820               	movf	??___ftmul,w
  3356  03DC  05A9               	andwf	___ftmul@sign,f
  3357  03DD  17F9               	bsf	___ftmul@f1+1,7
  3358  03DE  17FC               	bsf	___ftmul@f2+1,7
  3359  03DF  30FF               	movlw	255
  3360  03E0  05FB               	andwf	___ftmul@f2,f
  3361  03E1  30FF               	movlw	255
  3362  03E2  05FC               	andwf	___ftmul@f2+1,f
  3363  03E3  3000               	movlw	0
  3364  03E4  05FD               	andwf	___ftmul@f2+2,f
  3365  03E5  3000               	movlw	0
  3366  03E6  00A5               	movwf	___ftmul@f3_as_product
  3367  03E7  3000               	movlw	0
  3368  03E8  00A6               	movwf	___ftmul@f3_as_product+1
  3369  03E9  3000               	movlw	0
  3370  03EA  00A7               	movwf	___ftmul@f3_as_product+2
  3371  03EB  3007               	movlw	7
  3372  03EC  00A0               	movwf	??___ftmul
  3373  03ED  0820               	movf	??___ftmul,w
  3374  03EE  00A8               	movwf	___ftmul@cntr
  3375  03EF                     l1586:	
  3376  03EF  1C78               	btfss	___ftmul@f1,0
  3377  03F0  2BFF               	goto	l1590
  3378  03F1  087B               	movf	___ftmul@f2,w
  3379  03F2  07A5               	addwf	___ftmul@f3_as_product,f
  3380  03F3  087C               	movf	___ftmul@f2+1,w
  3381  03F4  1103               	clrz
  3382  03F5  1803               	skipnc
  3383  03F6  0A7C               	incf	___ftmul@f2+1,w
  3384  03F7  1D03               	btfss	3,2
  3385  03F8  07A6               	addwf	___ftmul@f3_as_product+1,f
  3386  03F9  087D               	movf	___ftmul@f2+2,w
  3387  03FA  1103               	clrz
  3388  03FB  1803               	skipnc
  3389  03FC  0A7D               	incf	___ftmul@f2+2,w
  3390  03FD  1D03               	btfss	3,2
  3391  03FE  07A7               	addwf	___ftmul@f3_as_product+2,f
  3392  03FF                     l1590:	
  3393  03FF  3001               	movlw	1
  3394  0400                     u2635:	
  3395  0400  1003               	clrc
  3396  0401  0CFA               	rrf	___ftmul@f1+2,f
  3397  0402  0CF9               	rrf	___ftmul@f1+1,f
  3398  0403  0CF8               	rrf	___ftmul@f1,f
  3399  0404  3EFF               	addlw	-1
  3400  0405  1D03               	skipz
  3401  0406  2C00               	goto	u2635
  3402  0407  3001               	movlw	1
  3403  0408                     u2645:	
  3404  0408  1003               	clrc
  3405  0409  0DFB               	rlf	___ftmul@f2,f
  3406  040A  0DFC               	rlf	___ftmul@f2+1,f
  3407  040B  0DFD               	rlf	___ftmul@f2+2,f
  3408  040C  3EFF               	addlw	-1
  3409  040D  1D03               	skipz
  3410  040E  2C08               	goto	u2645
  3411  040F  3001               	movlw	1
  3412  0410  02A8               	subwf	___ftmul@cntr,f
  3413  0411  1D03               	btfss	3,2
  3414  0412  2BEF               	goto	l1586
  3415  0413  3009               	movlw	9
  3416  0414  00A0               	movwf	??___ftmul
  3417  0415  0820               	movf	??___ftmul,w
  3418  0416  00A8               	movwf	___ftmul@cntr
  3419  0417                     l1598:	
  3420  0417  1C78               	btfss	___ftmul@f1,0
  3421  0418  2C27               	goto	l1602
  3422  0419  087B               	movf	___ftmul@f2,w
  3423  041A  07A5               	addwf	___ftmul@f3_as_product,f
  3424  041B  087C               	movf	___ftmul@f2+1,w
  3425  041C  1103               	clrz
  3426  041D  1803               	skipnc
  3427  041E  0A7C               	incf	___ftmul@f2+1,w
  3428  041F  1D03               	btfss	3,2
  3429  0420  07A6               	addwf	___ftmul@f3_as_product+1,f
  3430  0421  087D               	movf	___ftmul@f2+2,w
  3431  0422  1103               	clrz
  3432  0423  1803               	skipnc
  3433  0424  0A7D               	incf	___ftmul@f2+2,w
  3434  0425  1D03               	btfss	3,2
  3435  0426  07A7               	addwf	___ftmul@f3_as_product+2,f
  3436  0427                     l1602:	
  3437  0427  3001               	movlw	1
  3438  0428                     u2685:	
  3439  0428  1003               	clrc
  3440  0429  0CFA               	rrf	___ftmul@f1+2,f
  3441  042A  0CF9               	rrf	___ftmul@f1+1,f
  3442  042B  0CF8               	rrf	___ftmul@f1,f
  3443  042C  3EFF               	addlw	-1
  3444  042D  1D03               	skipz
  3445  042E  2C28               	goto	u2685
  3446  042F  3001               	movlw	1
  3447  0430                     u2695:	
  3448  0430  1003               	clrc
  3449  0431  0CA7               	rrf	___ftmul@f3_as_product+2,f
  3450  0432  0CA6               	rrf	___ftmul@f3_as_product+1,f
  3451  0433  0CA5               	rrf	___ftmul@f3_as_product,f
  3452  0434  3EFF               	addlw	-1
  3453  0435  1D03               	skipz
  3454  0436  2C30               	goto	u2695
  3455  0437  3001               	movlw	1
  3456  0438  02A8               	subwf	___ftmul@cntr,f
  3457  0439  1D03               	btfss	3,2
  3458  043A  2C17               	goto	l1598
  3459  043B  0825               	movf	___ftmul@f3_as_product,w
  3460  043C  00F0               	movwf	___ftpack@arg
  3461  043D  0826               	movf	___ftmul@f3_as_product+1,w
  3462  043E  00F1               	movwf	___ftpack@arg+1
  3463  043F  0827               	movf	___ftmul@f3_as_product+2,w
  3464  0440  00F2               	movwf	___ftpack@arg+2
  3465  0441  0824               	movf	___ftmul@exp,w
  3466  0442  00A0               	movwf	??___ftmul
  3467  0443  0820               	movf	??___ftmul,w
  3468  0444  00F3               	movwf	___ftpack@exp
  3469  0445  0829               	movf	___ftmul@sign,w
  3470  0446  00A1               	movwf	??___ftmul+1
  3471  0447  0821               	movf	??___ftmul+1,w
  3472  0448  00F4               	movwf	___ftpack@sign
  3473  0449  120A  118A  2144   	fcall	___ftpack
  3474  044C  0870               	movf	?___ftpack,w
  3475  044D  00F8               	movwf	?___ftmul
  3476  044E  0871               	movf	?___ftpack+1,w
  3477  044F  00F9               	movwf	?___ftmul+1
  3478  0450  0872               	movf	?___ftpack+2,w
  3479  0451  00FA               	movwf	?___ftmul+2
  3480  0452  0008               	return
  3481  0453                     __end_of___ftmul:	
  3482                           
  3483                           	psect	text14
  3484  0144                     __ptext14:	
  3485 ;; *************** function ___ftpack *****************
  3486 ;; Defined at:
  3487 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  arg             3    0[COMMON] unsigned um
  3490 ;;  exp             1    3[COMMON] unsigned char 
  3491 ;;  sign            1    4[COMMON] unsigned char 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  3    0[COMMON] float 
  3496 ;; Registers used:
  3497 ;;		wreg, status,2, status,0
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3503 ;;      Params:         5       0       0       0       0
  3504 ;;      Locals:         0       0       0       0       0
  3505 ;;      Temps:          3       0       0       0       0
  3506 ;;      Totals:         8       0       0       0       0
  3507 ;;Total ram usage:        8 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		___ftadd
  3513 ;;		___ftmul
  3514 ;;		___lltoft
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function ___ftpack
  3520  0144                     ___ftpack:	
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3524  0144  0873               	movf	___ftpack@exp,w
  3525  0145  1903               	btfsc	3,2
  3526  0146  294C               	goto	l1226
  3527  0147  0872               	movf	___ftpack@arg+2,w
  3528  0148  0471               	iorwf	___ftpack@arg+1,w
  3529  0149  0470               	iorwf	___ftpack@arg,w
  3530  014A  1D03               	skipz
  3531  014B  295F               	goto	l1232
  3532  014C                     l1226:	
  3533  014C  3000               	movlw	0
  3534  014D  00F0               	movwf	?___ftpack
  3535  014E  3000               	movlw	0
  3536  014F  00F1               	movwf	?___ftpack+1
  3537  0150  3000               	movlw	0
  3538  0151  00F2               	movwf	?___ftpack+2
  3539  0152  0008               	return
  3540  0153                     l1230:	
  3541  0153  3001               	movlw	1
  3542  0154  00F5               	movwf	??___ftpack
  3543  0155  0875               	movf	??___ftpack,w
  3544  0156  07F3               	addwf	___ftpack@exp,f
  3545  0157  3001               	movlw	1
  3546  0158                     u1715:	
  3547  0158  1003               	clrc
  3548  0159  0CF2               	rrf	___ftpack@arg+2,f
  3549  015A  0CF1               	rrf	___ftpack@arg+1,f
  3550  015B  0CF0               	rrf	___ftpack@arg,f
  3551  015C  3EFF               	addlw	-1
  3552  015D  1D03               	skipz
  3553  015E  2958               	goto	u1715
  3554  015F                     l1232:	
  3555  015F  30FE               	movlw	254
  3556  0160  0572               	andwf	___ftpack@arg+2,w
  3557  0161  1903               	btfsc	3,2
  3558  0162  297A               	goto	l398
  3559  0163  2953               	goto	l1230
  3560  0164                     l1234:	
  3561  0164  3001               	movlw	1
  3562  0165  00F5               	movwf	??___ftpack
  3563  0166  0875               	movf	??___ftpack,w
  3564  0167  07F3               	addwf	___ftpack@exp,f
  3565  0168  3001               	movlw	1
  3566  0169  07F0               	addwf	___ftpack@arg,f
  3567  016A  3000               	movlw	0
  3568  016B  1803               	skipnc
  3569  016C  3001               	movlw	1
  3570  016D  07F1               	addwf	___ftpack@arg+1,f
  3571  016E  3000               	movlw	0
  3572  016F  1803               	skipnc
  3573  0170  3001               	movlw	1
  3574  0171  07F2               	addwf	___ftpack@arg+2,f
  3575  0172  3001               	movlw	1
  3576  0173                     u1735:	
  3577  0173  1003               	clrc
  3578  0174  0CF2               	rrf	___ftpack@arg+2,f
  3579  0175  0CF1               	rrf	___ftpack@arg+1,f
  3580  0176  0CF0               	rrf	___ftpack@arg,f
  3581  0177  3EFF               	addlw	-1
  3582  0178  1D03               	skipz
  3583  0179  2973               	goto	u1735
  3584  017A                     l398:	
  3585  017A  30FF               	movlw	255
  3586  017B  0572               	andwf	___ftpack@arg+2,w
  3587  017C  1903               	btfsc	3,2
  3588  017D  2989               	goto	l1242
  3589  017E  2964               	goto	l1234
  3590  017F                     l1240:	
  3591  017F  3001               	movlw	1
  3592  0180  02F3               	subwf	___ftpack@exp,f
  3593  0181  3001               	movlw	1
  3594  0182                     u1755:	
  3595  0182  1003               	clrc
  3596  0183  0DF0               	rlf	___ftpack@arg,f
  3597  0184  0DF1               	rlf	___ftpack@arg+1,f
  3598  0185  0DF2               	rlf	___ftpack@arg+2,f
  3599  0186  3EFF               	addlw	-1
  3600  0187  1D03               	skipz
  3601  0188  2982               	goto	u1755
  3602  0189                     l1242:	
  3603  0189  1BF1               	btfsc	___ftpack@arg+1,7
  3604  018A  298F               	goto	l405
  3605  018B  3002               	movlw	2
  3606  018C  0273               	subwf	___ftpack@exp,w
  3607  018D  1803               	skipnc
  3608  018E  297F               	goto	l1240
  3609  018F                     l405:	
  3610  018F  1873               	btfsc	___ftpack@exp,0
  3611  0190  2997               	goto	l406
  3612  0191  30FF               	movlw	255
  3613  0192  05F0               	andwf	___ftpack@arg,f
  3614  0193  307F               	movlw	127
  3615  0194  05F1               	andwf	___ftpack@arg+1,f
  3616  0195  30FF               	movlw	255
  3617  0196  05F2               	andwf	___ftpack@arg+2,f
  3618  0197                     l406:	
  3619  0197  1003               	clrc
  3620  0198  0CF3               	rrf	___ftpack@exp,f
  3621  0199  0873               	movf	___ftpack@exp,w
  3622  019A  00F5               	movwf	??___ftpack
  3623  019B  01F6               	clrf	??___ftpack+1
  3624  019C  01F7               	clrf	??___ftpack+2
  3625  019D  3010               	movlw	16
  3626  019E                     u1795:	
  3627  019E  1003               	clrc
  3628  019F  0DF5               	rlf	??___ftpack,f
  3629  01A0  0DF6               	rlf	??___ftpack+1,f
  3630  01A1  0DF7               	rlf	??___ftpack+2,f
  3631  01A2  3EFF               	addlw	-1
  3632  01A3  1D03               	skipz
  3633  01A4  299E               	goto	u1795
  3634  01A5  0875               	movf	??___ftpack,w
  3635  01A6  04F0               	iorwf	___ftpack@arg,f
  3636  01A7  0876               	movf	??___ftpack+1,w
  3637  01A8  04F1               	iorwf	___ftpack@arg+1,f
  3638  01A9  0877               	movf	??___ftpack+2,w
  3639  01AA  04F2               	iorwf	___ftpack@arg+2,f
  3640  01AB  0874               	movf	___ftpack@sign,w
  3641  01AC  1903               	btfsc	3,2
  3642  01AD  0008               	return
  3643  01AE  17F2               	bsf	___ftpack@arg+2,7
  3644  01AF  0008               	return
  3645  01B0                     __end_of___ftpack:	
  3646                           
  3647                           	psect	text15
  3648  0FA3                     __ptext15:	
  3649 ;; *************** function ___ftge *****************
  3650 ;; Defined at:
  3651 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  ff1             3    0[COMMON] float 
  3654 ;;  ff2             3    3[COMMON] float 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;		None               void
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3666 ;;      Params:         6       0       0       0       0
  3667 ;;      Locals:         0       0       0       0       0
  3668 ;;      Temps:          6       0       0       0       0
  3669 ;;      Totals:        12       0       0       0       0
  3670 ;;Total ram usage:       12 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; This function calls:
  3673 ;;		Nothing
  3674 ;; This function is called by:
  3675 ;;		_ftoa
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           
  3680                           ;psect for function ___ftge
  3681  0FA3                     ___ftge:	
  3682                           
  3683                           ;incstack = 0
  3684                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3685  0FA3  1FF2               	btfss	___ftge@ff1+2,7
  3686  0FA4  2FCA               	goto	l1546
  3687  0FA5  3000               	movlw	0
  3688  0FA6  00F6               	movwf	??___ftge
  3689  0FA7  3000               	movlw	0
  3690  0FA8  00F7               	movwf	??___ftge+1
  3691  0FA9  3080               	movlw	128
  3692  0FAA  00F8               	movwf	??___ftge+2
  3693  0FAB  0970               	comf	___ftge@ff1,w
  3694  0FAC  00F9               	movwf	??___ftge+3
  3695  0FAD  0971               	comf	___ftge@ff1+1,w
  3696  0FAE  00FA               	movwf	??___ftge+4
  3697  0FAF  0972               	comf	___ftge@ff1+2,w
  3698  0FB0  00FB               	movwf	??___ftge+5
  3699  0FB1  0AF9               	incf	??___ftge+3,f
  3700  0FB2  1903               	skipnz
  3701  0FB3  0AFA               	incf	??___ftge+4,f
  3702  0FB4  1903               	skipnz
  3703  0FB5  0AFB               	incf	??___ftge+5,f
  3704  0FB6  0879               	movf	??___ftge+3,w
  3705  0FB7  07F6               	addwf	??___ftge,f
  3706  0FB8  087A               	movf	??___ftge+4,w
  3707  0FB9  1803               	skipnc
  3708  0FBA  0F7A               	incfsz	??___ftge+4,w
  3709  0FBB  2FBD               	goto	u2531
  3710  0FBC  2FBE               	goto	u2532
  3711  0FBD                     u2531:	
  3712  0FBD  07F7               	addwf	??___ftge+1,f
  3713  0FBE                     u2532:	
  3714  0FBE  087B               	movf	??___ftge+5,w
  3715  0FBF  1803               	skipnc
  3716  0FC0  0F7B               	incfsz	??___ftge+5,w
  3717  0FC1  2FC3               	goto	u2533
  3718  0FC2  2FC4               	goto	u2534
  3719  0FC3                     u2533:	
  3720  0FC3  07F8               	addwf	??___ftge+2,f
  3721  0FC4                     u2534:	
  3722  0FC4  0876               	movf	??___ftge,w
  3723  0FC5  00F0               	movwf	___ftge@ff1
  3724  0FC6  0877               	movf	??___ftge+1,w
  3725  0FC7  00F1               	movwf	___ftge@ff1+1
  3726  0FC8  0878               	movf	??___ftge+2,w
  3727  0FC9  00F2               	movwf	___ftge@ff1+2
  3728  0FCA                     l1546:	
  3729  0FCA  1FF5               	btfss	___ftge@ff2+2,7
  3730  0FCB  2FF1               	goto	l1550
  3731  0FCC  3000               	movlw	0
  3732  0FCD  00F6               	movwf	??___ftge
  3733  0FCE  3000               	movlw	0
  3734  0FCF  00F7               	movwf	??___ftge+1
  3735  0FD0  3080               	movlw	128
  3736  0FD1  00F8               	movwf	??___ftge+2
  3737  0FD2  0973               	comf	___ftge@ff2,w
  3738  0FD3  00F9               	movwf	??___ftge+3
  3739  0FD4  0974               	comf	___ftge@ff2+1,w
  3740  0FD5  00FA               	movwf	??___ftge+4
  3741  0FD6  0975               	comf	___ftge@ff2+2,w
  3742  0FD7  00FB               	movwf	??___ftge+5
  3743  0FD8  0AF9               	incf	??___ftge+3,f
  3744  0FD9  1903               	skipnz
  3745  0FDA  0AFA               	incf	??___ftge+4,f
  3746  0FDB  1903               	skipnz
  3747  0FDC  0AFB               	incf	??___ftge+5,f
  3748  0FDD  0879               	movf	??___ftge+3,w
  3749  0FDE  07F6               	addwf	??___ftge,f
  3750  0FDF  087A               	movf	??___ftge+4,w
  3751  0FE0  1803               	skipnc
  3752  0FE1  0F7A               	incfsz	??___ftge+4,w
  3753  0FE2  2FE4               	goto	u2551
  3754  0FE3  2FE5               	goto	u2552
  3755  0FE4                     u2551:	
  3756  0FE4  07F7               	addwf	??___ftge+1,f
  3757  0FE5                     u2552:	
  3758  0FE5  087B               	movf	??___ftge+5,w
  3759  0FE6  1803               	skipnc
  3760  0FE7  0F7B               	incfsz	??___ftge+5,w
  3761  0FE8  2FEA               	goto	u2553
  3762  0FE9  2FEB               	goto	u2554
  3763  0FEA                     u2553:	
  3764  0FEA  07F8               	addwf	??___ftge+2,f
  3765  0FEB                     u2554:	
  3766  0FEB  0876               	movf	??___ftge,w
  3767  0FEC  00F3               	movwf	___ftge@ff2
  3768  0FED  0877               	movf	??___ftge+1,w
  3769  0FEE  00F4               	movwf	___ftge@ff2+1
  3770  0FEF  0878               	movf	??___ftge+2,w
  3771  0FF0  00F5               	movwf	___ftge@ff2+2
  3772  0FF1                     l1550:	
  3773  0FF1  3080               	movlw	128
  3774  0FF2  06F2               	xorwf	___ftge@ff1+2,f
  3775  0FF3  3080               	movlw	128
  3776  0FF4  06F5               	xorwf	___ftge@ff2+2,f
  3777  0FF5  0875               	movf	___ftge@ff2+2,w
  3778  0FF6  0272               	subwf	___ftge@ff1+2,w
  3779  0FF7  1D03               	skipz
  3780  0FF8  0008               	return
  3781  0FF9  0874               	movf	___ftge@ff2+1,w
  3782  0FFA  0271               	subwf	___ftge@ff1+1,w
  3783  0FFB  1D03               	skipz
  3784  0FFC  0008               	return
  3785  0FFD  0873               	movf	___ftge@ff2,w
  3786  0FFE  0270               	subwf	___ftge@ff1,w
  3787  0FFF  0008               	return
  3788  1000                     __end_of___ftge:	
  3789                           
  3790                           	psect	text16
  3791  0F23                     __ptext16:	
  3792 ;; *************** function _LCDPrint *****************
  3793 ;; Defined at:
  3794 ;;		line 76 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  y               1    wreg     unsigned char 
  3797 ;;  x               1    0[BANK0 ] unsigned char 
  3798 ;;  str             2    1[BANK0 ] PTR unsigned char 
  3799 ;;		 -> ftoa@buf(17), STR_4(2), STR_3(9), STR_2(12), 
  3800 ;;		 -> LCDPrintNumber@str(7), 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  y               1    3[BANK0 ] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      void 
  3805 ;; Registers used:
  3806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3812 ;;      Params:         0       3       0       0       0
  3813 ;;      Locals:         0       1       0       0       0
  3814 ;;      Temps:          1       0       0       0       0
  3815 ;;      Totals:         1       4       0       0       0
  3816 ;;Total ram usage:        5 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    4
  3819 ;; This function calls:
  3820 ;;		_LCDMove
  3821 ;;		_LCDPutChar
  3822 ;; This function is called by:
  3823 ;;		_LCDPrintFNumber
  3824 ;;		_main
  3825 ;;		_LCDPrintNumber
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           
  3830                           ;psect for function _LCDPrint
  3831  0F23                     _LCDPrint:	
  3832                           
  3833                           ;incstack = 0
  3834                           ; Regs used in _LCDPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3835                           ;LCDPrint@y stored from wreg
  3836  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  3837  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  3838  0F25  00A3               	movwf	LCDPrint@y
  3839                           
  3840                           ;MyLCD.c: 78: LCDMove(y,x);
  3841  0F26  0820               	movf	LCDPrint@x,w
  3842  0F27  00FD               	movwf	??_LCDPrint
  3843  0F28  087D               	movf	??_LCDPrint,w
  3844  0F29  00F5               	movwf	LCDMove@x
  3845  0F2A  0823               	movf	LCDPrint@y,w
  3846  0F2B  120A  158A  26B7  120A  158A  	fcall	_LCDMove
  3847  0F30                     l1690:	
  3848                           ;MyLCD.c: 79: while(*str)
  3849                           
  3850  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  3852  0F32  0822               	movf	LCDPrint@str+1,w
  3853  0F33  00FF               	movwf	127
  3854  0F34  0821               	movf	LCDPrint@str,w
  3855  0F35  0084               	movwf	4
  3856  0F36  120A  158A  2000  120A  158A  	fcall	stringtab
  3857  0F3B  3A00               	xorlw	0
  3858  0F3C  1903               	btfsc	3,2
  3859  0F3D  0008               	return
  3860                           
  3861                           ;MyLCD.c: 80: {
  3862                           ;MyLCD.c: 81: LCDPutChar(*str);
  3863  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  3865  0F40  0822               	movf	LCDPrint@str+1,w
  3866  0F41  00FF               	movwf	127
  3867  0F42  0821               	movf	LCDPrint@str,w
  3868  0F43  0084               	movwf	4
  3869  0F44  120A  158A  2000  120A  158A  	fcall	stringtab
  3870  0F49  120A  158A  264A  120A  158A  	fcall	_LCDPutChar
  3871                           
  3872                           ;MyLCD.c: 82: str++;
  3873  0F4E  3001               	movlw	1
  3874  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  3875  0F50  1303               	bcf	3,6	;RP1=0, select bank0
  3876  0F51  07A1               	addwf	LCDPrint@str,f
  3877  0F52  1803               	skipnc
  3878  0F53  0AA2               	incf	LCDPrint@str+1,f
  3879  0F54  2F30               	goto	l1690
  3880  0F55                     __end_of_LCDPrint:	
  3881                           
  3882                           	psect	text17
  3883  0E4A                     __ptext17:	
  3884 ;; *************** function _LCDPutChar *****************
  3885 ;; Defined at:
  3886 ;;		line 72 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  ch              1    wreg     unsigned char 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  ch              1    5[COMMON] unsigned char 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  1    wreg      void 
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, status,0, pclath, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3900 ;;      Params:         0       0       0       0       0
  3901 ;;      Locals:         1       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0
  3903 ;;      Totals:         1       0       0       0       0
  3904 ;;Total ram usage:        1 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    3
  3907 ;; This function calls:
  3908 ;;		_LCDWriteData
  3909 ;; This function is called by:
  3910 ;;		_LCDPrint
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _LCDPutChar
  3916  0E4A                     _LCDPutChar:	
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+pclath+cstack]
  3920                           ;LCDPutChar@ch stored from wreg
  3921  0E4A  00F5               	movwf	LCDPutChar@ch
  3922                           
  3923                           ;MyLCD.c: 74: LCDWriteData(ch);
  3924  0E4B  0875               	movf	LCDPutChar@ch,w
  3925  0E4C  120A  158A  2669   	fcall	_LCDWriteData
  3926  0E4F  0008               	return
  3927  0E50                     __end_of_LCDPutChar:	
  3928                           
  3929                           	psect	text18
  3930  0E69                     __ptext18:	
  3931 ;; *************** function _LCDWriteData *****************
  3932 ;; Defined at:
  3933 ;;		line 43 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  dt              1    wreg     unsigned char 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  dt              1    4[COMMON] unsigned char 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		wreg, status,2, status,0, pclath, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3947 ;;      Params:         0       0       0       0       0
  3948 ;;      Locals:         1       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0
  3950 ;;      Totals:         1       0       0       0       0
  3951 ;;Total ram usage:        1 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    2
  3954 ;; This function calls:
  3955 ;;		_LCDWriteByte
  3956 ;; This function is called by:
  3957 ;;		_LCDPutChar
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _LCDWriteData
  3963  0E69                     _LCDWriteData:	
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _LCDWriteData: [wreg+status,2+status,0+pclath+cstack]
  3967                           ;LCDWriteData@dt stored from wreg
  3968  0E69  00F4               	movwf	LCDWriteData@dt
  3969                           
  3970                           ;MyLCD.c: 45: RD2=1;
  3971  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  3972  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  3973  0E6C  1508               	bsf	8,2	;volatile
  3974                           
  3975                           ;MyLCD.c: 47: LCDWriteByte(dt);
  3976  0E6D  0874               	movf	LCDWriteData@dt,w
  3977  0E6E  120A  118A  21B0   	fcall	_LCDWriteByte
  3978  0E71  0008               	return
  3979  0E72                     __end_of_LCDWriteData:	
  3980                           
  3981                           	psect	text19
  3982  0EB7                     __ptext19:	
  3983 ;; *************** function _LCDMove *****************
  3984 ;; Defined at:
  3985 ;;		line 66 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  y               1    wreg     unsigned char 
  3988 ;;  x               1    5[COMMON] unsigned char 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  y               1   12[COMMON] unsigned char 
  3991 ;;  Ad              2   10[COMMON] unsigned int 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4001 ;;      Params:         1       0       0       0       0
  4002 ;;      Locals:         3       0       0       0       0
  4003 ;;      Temps:          4       0       0       0       0
  4004 ;;      Totals:         8       0       0       0       0
  4005 ;;Total ram usage:        8 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    3
  4008 ;; This function calls:
  4009 ;;		_LCDWriteCommand
  4010 ;; This function is called by:
  4011 ;;		_LCDPrint
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _LCDMove
  4017  0EB7                     _LCDMove:	
  4018                           
  4019                           ;incstack = 0
  4020                           ; Regs used in _LCDMove: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4021                           ;LCDMove@y stored from wreg
  4022  0EB7  00FC               	movwf	LCDMove@y
  4023                           
  4024                           ;MyLCD.c: 68: unsigned int Ad;
  4025                           ;MyLCD.c: 69: Ad = 64*(y-1)+(x-1)+0x80;
  4026  0EB8  087C               	movf	LCDMove@y,w
  4027  0EB9  00F6               	movwf	??_LCDMove
  4028  0EBA  01F7               	clrf	??_LCDMove+1
  4029  0EBB  3006               	movlw	6
  4030  0EBC  00FF               	movwf	127
  4031  0EBD                     u2245:	
  4032  0EBD  1003               	clrc
  4033  0EBE  0DF6               	rlf	??_LCDMove,f
  4034  0EBF  0DF7               	rlf	??_LCDMove+1,f
  4035  0EC0  0BFF               	decfsz	127,f
  4036  0EC1  2EBD               	goto	u2245
  4037  0EC2  0875               	movf	LCDMove@x,w
  4038  0EC3  0776               	addwf	??_LCDMove,w
  4039  0EC4  00F8               	movwf	??_LCDMove+2
  4040  0EC5  3000               	movlw	0
  4041  0EC6  1803               	skipnc
  4042  0EC7  3001               	movlw	1
  4043  0EC8  0777               	addwf	??_LCDMove+1,w
  4044  0EC9  00F9               	movwf	??_LCDMove+3
  4045  0ECA  0878               	movf	??_LCDMove+2,w
  4046  0ECB  3E3F               	addlw	63
  4047  0ECC  00FA               	movwf	LCDMove@Ad
  4048  0ECD  0879               	movf	??_LCDMove+3,w
  4049  0ECE  1803               	skipnc
  4050  0ECF  3E01               	addlw	1
  4051  0ED0  3E00               	addlw	0
  4052  0ED1  00FB               	movwf	LCDMove@Ad+1
  4053                           
  4054                           ;MyLCD.c: 70: LCDWriteCommand(Ad);
  4055  0ED2  087A               	movf	LCDMove@Ad,w
  4056  0ED3  120A  158A  2660   	fcall	_LCDWriteCommand
  4057  0ED6  0008               	return
  4058  0ED7                     __end_of_LCDMove:	
  4059                           
  4060                           	psect	text20
  4061  0E99                     __ptext20:	
  4062 ;; *************** function _LCDInit *****************
  4063 ;; Defined at:
  4064 ;;		line 5 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;		None
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      void 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0, pclath, cstack
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4078 ;;      Params:         0       0       0       0       0
  4079 ;;      Locals:         0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0
  4081 ;;      Totals:         0       0       0       0       0
  4082 ;;Total ram usage:        0 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    3
  4085 ;; This function calls:
  4086 ;;		_LCDMode4Bit
  4087 ;;		_LCDWriteCommand
  4088 ;; This function is called by:
  4089 ;;		_main
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           
  4094                           ;psect for function _LCDInit
  4095  0E99                     _LCDInit:	
  4096                           
  4097                           ;MyLCD.c: 7: TRISD2 =0;
  4098                           
  4099                           ;incstack = 0
  4100                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  4101  0E99  1683               	bsf	3,5	;RP0=1, select bank1
  4102  0E9A  1303               	bcf	3,6	;RP1=0, select bank1
  4103  0E9B  1108               	bcf	8,2	;volatile
  4104                           
  4105                           ;MyLCD.c: 9: TRISD3 =0;
  4106  0E9C  1188               	bcf	8,3	;volatile
  4107                           
  4108                           ;MyLCD.c: 10: TRISD4 =0;
  4109  0E9D  1208               	bcf	8,4	;volatile
  4110                           
  4111                           ;MyLCD.c: 11: TRISD5 =0;
  4112  0E9E  1288               	bcf	8,5	;volatile
  4113                           
  4114                           ;MyLCD.c: 12: TRISD6 =0;
  4115  0E9F  1308               	bcf	8,6	;volatile
  4116                           
  4117                           ;MyLCD.c: 13: TRISD7 =0;
  4118  0EA0  1388               	bcf	8,7	;volatile
  4119                           
  4120                           ;MyLCD.c: 15: LCDMode4Bit();
  4121  0EA1  120A  158A  2672  120A  158A  	fcall	_LCDMode4Bit
  4122                           
  4123                           ;MyLCD.c: 16: LCDWriteCommand(0x28);
  4124  0EA6  3028               	movlw	40
  4125  0EA7  120A  158A  2660  120A  158A  	fcall	_LCDWriteCommand
  4126                           
  4127                           ;MyLCD.c: 17: LCDWriteCommand(0x0C);
  4128  0EAC  300C               	movlw	12
  4129  0EAD  120A  158A  2660  120A  158A  	fcall	_LCDWriteCommand
  4130                           
  4131                           ;MyLCD.c: 18: LCDWriteCommand(0x06);
  4132  0EB2  3006               	movlw	6
  4133  0EB3  120A  158A  2660   	fcall	_LCDWriteCommand
  4134  0EB6  0008               	return
  4135  0EB7                     __end_of_LCDInit:	
  4136                           
  4137                           	psect	text21
  4138  0E72                     __ptext21:	
  4139 ;; *************** function _LCDMode4Bit *****************
  4140 ;; Defined at:
  4141 ;;		line 20 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;		None
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0, pclath, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4155 ;;      Params:         0       0       0       0       0
  4156 ;;      Locals:         0       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0
  4158 ;;      Totals:         0       0       0       0       0
  4159 ;;Total ram usage:        0 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    1
  4162 ;; This function calls:
  4163 ;;		_LCDLatchData
  4164 ;; This function is called by:
  4165 ;;		_LCDInit
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function _LCDMode4Bit
  4171  0E72                     _LCDMode4Bit:	
  4172                           
  4173                           ;MyLCD.c: 22: RD2=0;
  4174                           
  4175                           ;incstack = 0
  4176                           ; Regs used in _LCDMode4Bit: [wreg+status,2+status,0+pclath+cstack]
  4177  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  4178  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  4179  0E74  1108               	bcf	8,2	;volatile
  4180                           
  4181                           ;MyLCD.c: 24: RD4=0;
  4182  0E75  1208               	bcf	8,4	;volatile
  4183                           
  4184                           ;MyLCD.c: 25: RD5=1;
  4185  0E76  1688               	bsf	8,5	;volatile
  4186                           
  4187                           ;MyLCD.c: 26: RD6=0;
  4188  0E77  1308               	bcf	8,6	;volatile
  4189                           
  4190                           ;MyLCD.c: 27: RD7=0;
  4191  0E78  1388               	bcf	8,7	;volatile
  4192                           
  4193                           ;MyLCD.c: 28: LCDLatchData();
  4194  0E79  120A  158A  267D   	fcall	_LCDLatchData
  4195  0E7C  0008               	return
  4196  0E7D                     __end_of_LCDMode4Bit:	
  4197                           
  4198                           	psect	text22
  4199  0E45                     __ptext22:	
  4200 ;; *************** function _LCDClear *****************
  4201 ;; Defined at:
  4202 ;;		line 62 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0, pclath, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4216 ;;      Params:         0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		_LCDWriteCommand
  4225 ;; This function is called by:
  4226 ;;		_main
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _LCDClear
  4232  0E45                     _LCDClear:	
  4233                           
  4234                           ;MyLCD.c: 64: LCDWriteCommand(0x01);
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
  4238  0E45  3001               	movlw	1
  4239  0E46  120A  158A  2660   	fcall	_LCDWriteCommand
  4240  0E49  0008               	return
  4241  0E4A                     __end_of_LCDClear:	
  4242                           
  4243                           	psect	text23
  4244  0E60                     __ptext23:	
  4245 ;; *************** function _LCDWriteCommand *****************
  4246 ;; Defined at:
  4247 ;;		line 49 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  dt              1    wreg     unsigned char 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  dt              1    4[COMMON] unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, status,0, pclath, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4261 ;;      Params:         0       0       0       0       0
  4262 ;;      Locals:         1       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0
  4264 ;;      Totals:         1       0       0       0       0
  4265 ;;Total ram usage:        1 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    2
  4268 ;; This function calls:
  4269 ;;		_LCDWriteByte
  4270 ;; This function is called by:
  4271 ;;		_LCDInit
  4272 ;;		_LCDClear
  4273 ;;		_LCDMove
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           
  4278                           ;psect for function _LCDWriteCommand
  4279  0E60                     _LCDWriteCommand:	
  4280                           
  4281                           ;incstack = 0
  4282                           ; Regs used in _LCDWriteCommand: [wreg+status,2+status,0+pclath+cstack]
  4283                           ;LCDWriteCommand@dt stored from wreg
  4284  0E60  00F4               	movwf	LCDWriteCommand@dt
  4285                           
  4286                           ;MyLCD.c: 51: RD2=0;
  4287  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  4288  0E62  1303               	bcf	3,6	;RP1=0, select bank0
  4289  0E63  1108               	bcf	8,2	;volatile
  4290                           
  4291                           ;MyLCD.c: 53: LCDWriteByte(dt);
  4292  0E64  0874               	movf	LCDWriteCommand@dt,w
  4293  0E65  120A  118A  21B0   	fcall	_LCDWriteByte
  4294  0E68  0008               	return
  4295  0E69                     __end_of_LCDWriteCommand:	
  4296                           
  4297                           	psect	text24
  4298  01B0                     __ptext24:	
  4299 ;; *************** function _LCDWriteByte *****************
  4300 ;; Defined at:
  4301 ;;		line 30 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  ch              1    wreg     unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  ch              1    3[COMMON] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0, pclath, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4315 ;;      Params:         0       0       0       0       0
  4316 ;;      Locals:         1       0       0       0       0
  4317 ;;      Temps:          1       0       0       0       0
  4318 ;;      Totals:         2       0       0       0       0
  4319 ;;Total ram usage:        2 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    1
  4322 ;; This function calls:
  4323 ;;		_LCDLatchData
  4324 ;; This function is called by:
  4325 ;;		_LCDWriteData
  4326 ;;		_LCDWriteCommand
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _LCDWriteByte
  4332  01B0                     _LCDWriteByte:	
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _LCDWriteByte: [wreg+status,2+status,0+pclath+cstack]
  4336                           ;LCDWriteByte@ch stored from wreg
  4337  01B0  00F3               	movwf	LCDWriteByte@ch
  4338                           
  4339                           ;MyLCD.c: 32: RD7 = (ch>>7)&0x01;
  4340  01B1  0873               	movf	LCDWriteByte@ch,w
  4341  01B2  00F2               	movwf	??_LCDWriteByte
  4342  01B3  3007               	movlw	7
  4343  01B4                     u1465:	
  4344  01B4  1003               	clrc
  4345  01B5  0CF2               	rrf	??_LCDWriteByte,f
  4346  01B6  3EFF               	addlw	-1
  4347  01B7  1D03               	skipz
  4348  01B8  29B4               	goto	u1465
  4349  01B9  1C72               	btfss	??_LCDWriteByte,0
  4350  01BA  29BF               	goto	u1470
  4351  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  4352  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  4353  01BD  1788               	bsf	8,7	;volatile
  4354  01BE  29C2               	goto	u1484
  4355  01BF                     u1470:	
  4356  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  4357  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  4358  01C1  1388               	bcf	8,7	;volatile
  4359  01C2                     u1484:	
  4360                           
  4361                           ;MyLCD.c: 33: RD6 = (ch>>6)&0x01;
  4362  01C2  0873               	movf	LCDWriteByte@ch,w
  4363  01C3  00F2               	movwf	??_LCDWriteByte
  4364  01C4  3006               	movlw	6
  4365  01C5                     u1495:	
  4366  01C5  1003               	clrc
  4367  01C6  0CF2               	rrf	??_LCDWriteByte,f
  4368  01C7  3EFF               	addlw	-1
  4369  01C8  1D03               	skipz
  4370  01C9  29C5               	goto	u1495
  4371  01CA  1C72               	btfss	??_LCDWriteByte,0
  4372  01CB  29D0               	goto	u1500
  4373  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  4374  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  4375  01CE  1708               	bsf	8,6	;volatile
  4376  01CF  29D3               	goto	u1514
  4377  01D0                     u1500:	
  4378  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  4379  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  4380  01D2  1308               	bcf	8,6	;volatile
  4381  01D3                     u1514:	
  4382                           
  4383                           ;MyLCD.c: 34: RD5 = (ch>>5)&0x01;
  4384  01D3  0873               	movf	LCDWriteByte@ch,w
  4385  01D4  00F2               	movwf	??_LCDWriteByte
  4386  01D5  3005               	movlw	5
  4387  01D6                     u1525:	
  4388  01D6  1003               	clrc
  4389  01D7  0CF2               	rrf	??_LCDWriteByte,f
  4390  01D8  3EFF               	addlw	-1
  4391  01D9  1D03               	skipz
  4392  01DA  29D6               	goto	u1525
  4393  01DB  1C72               	btfss	??_LCDWriteByte,0
  4394  01DC  29E1               	goto	u1530
  4395  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  4396  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  4397  01DF  1688               	bsf	8,5	;volatile
  4398  01E0  29E4               	goto	u1544
  4399  01E1                     u1530:	
  4400  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  4401  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  4402  01E3  1288               	bcf	8,5	;volatile
  4403  01E4                     u1544:	
  4404                           
  4405                           ;MyLCD.c: 35: RD4 = (ch>>4)&0x01;
  4406  01E4  0873               	movf	LCDWriteByte@ch,w
  4407  01E5  00F2               	movwf	??_LCDWriteByte
  4408  01E6  3004               	movlw	4
  4409  01E7                     u1555:	
  4410  01E7  1003               	clrc
  4411  01E8  0CF2               	rrf	??_LCDWriteByte,f
  4412  01E9  3EFF               	addlw	-1
  4413  01EA  1D03               	skipz
  4414  01EB  29E7               	goto	u1555
  4415  01EC  1C72               	btfss	??_LCDWriteByte,0
  4416  01ED  29F2               	goto	u1560
  4417  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  4418  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  4419  01F0  1608               	bsf	8,4	;volatile
  4420  01F1  29F5               	goto	l1212
  4421  01F2                     u1560:	
  4422  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  4423  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  4424  01F4  1208               	bcf	8,4	;volatile
  4425  01F5                     l1212:	
  4426                           
  4427                           ;MyLCD.c: 36: LCDLatchData();
  4428  01F5  120A  158A  267D  120A  118A  	fcall	_LCDLatchData
  4429                           
  4430                           ;MyLCD.c: 37: RD7 = (ch>>3)&0x01;
  4431  01FA  0873               	movf	LCDWriteByte@ch,w
  4432  01FB  00F2               	movwf	??_LCDWriteByte
  4433  01FC  3003               	movlw	3
  4434  01FD                     u1585:	
  4435  01FD  1003               	clrc
  4436  01FE  0CF2               	rrf	??_LCDWriteByte,f
  4437  01FF  3EFF               	addlw	-1
  4438  0200  1D03               	skipz
  4439  0201  29FD               	goto	u1585
  4440  0202  1C72               	btfss	??_LCDWriteByte,0
  4441  0203  2A08               	goto	u1590
  4442  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4443  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4444  0206  1788               	bsf	8,7	;volatile
  4445  0207  2A0B               	goto	l1216
  4446  0208                     u1590:	
  4447  0208  1283               	bcf	3,5	;RP0=0, select bank0
  4448  0209  1303               	bcf	3,6	;RP1=0, select bank0
  4449  020A  1388               	bcf	8,7	;volatile
  4450  020B                     l1216:	
  4451                           
  4452                           ;MyLCD.c: 38: RD6 = (ch>>2)&0x01;
  4453  020B  0873               	movf	LCDWriteByte@ch,w
  4454  020C  00F2               	movwf	??_LCDWriteByte
  4455  020D  3002               	movlw	2
  4456  020E                     u1615:	
  4457  020E  1003               	clrc
  4458  020F  0CF2               	rrf	??_LCDWriteByte,f
  4459  0210  3EFF               	addlw	-1
  4460  0211  1D03               	skipz
  4461  0212  2A0E               	goto	u1615
  4462  0213  1C72               	btfss	??_LCDWriteByte,0
  4463  0214  2A19               	goto	u1620
  4464  0215  1283               	bcf	3,5	;RP0=0, select bank0
  4465  0216  1303               	bcf	3,6	;RP1=0, select bank0
  4466  0217  1708               	bsf	8,6	;volatile
  4467  0218  2A1C               	goto	l1218
  4468  0219                     u1620:	
  4469  0219  1283               	bcf	3,5	;RP0=0, select bank0
  4470  021A  1303               	bcf	3,6	;RP1=0, select bank0
  4471  021B  1308               	bcf	8,6	;volatile
  4472  021C                     l1218:	
  4473                           
  4474                           ;MyLCD.c: 39: RD5 = (ch>>1)&0x01;
  4475  021C  0873               	movf	LCDWriteByte@ch,w
  4476  021D  00F2               	movwf	??_LCDWriteByte
  4477  021E  3001               	movlw	1
  4478  021F                     u1645:	
  4479  021F  1003               	clrc
  4480  0220  0CF2               	rrf	??_LCDWriteByte,f
  4481  0221  3EFF               	addlw	-1
  4482  0222  1D03               	skipz
  4483  0223  2A1F               	goto	u1645
  4484  0224  1C72               	btfss	??_LCDWriteByte,0
  4485  0225  2A2A               	goto	u1650
  4486  0226  1283               	bcf	3,5	;RP0=0, select bank0
  4487  0227  1303               	bcf	3,6	;RP1=0, select bank0
  4488  0228  1688               	bsf	8,5	;volatile
  4489  0229  2A2D               	goto	l1220
  4490  022A                     u1650:	
  4491  022A  1283               	bcf	3,5	;RP0=0, select bank0
  4492  022B  1303               	bcf	3,6	;RP1=0, select bank0
  4493  022C  1288               	bcf	8,5	;volatile
  4494  022D                     l1220:	
  4495                           
  4496                           ;MyLCD.c: 40: RD4 = ch&0x01;
  4497  022D  1C73               	btfss	LCDWriteByte@ch,0
  4498  022E  2A33               	goto	u1670
  4499  022F  1283               	bcf	3,5	;RP0=0, select bank0
  4500  0230  1303               	bcf	3,6	;RP1=0, select bank0
  4501  0231  1608               	bsf	8,4	;volatile
  4502  0232  2A36               	goto	u1684
  4503  0233                     u1670:	
  4504  0233  1283               	bcf	3,5	;RP0=0, select bank0
  4505  0234  1303               	bcf	3,6	;RP1=0, select bank0
  4506  0235  1208               	bcf	8,4	;volatile
  4507  0236                     u1684:	
  4508                           
  4509                           ;MyLCD.c: 41: LCDLatchData();
  4510  0236  120A  158A  267D   	fcall	_LCDLatchData
  4511  0239  0008               	return
  4512  023A                     __end_of_LCDWriteByte:	
  4513                           
  4514                           	psect	text25
  4515  0E7D                     __ptext25:	
  4516 ;; *************** function _LCDLatchData *****************
  4517 ;; Defined at:
  4518 ;;		line 55 in file "D:\PIC_MPlap\LCD\MyLCD.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;		None
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;		None
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      void 
  4525 ;; Registers used:
  4526 ;;		wreg
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4532 ;;      Params:         0       0       0       0       0
  4533 ;;      Locals:         0       0       0       0       0
  4534 ;;      Temps:          2       0       0       0       0
  4535 ;;      Totals:         2       0       0       0       0
  4536 ;;Total ram usage:        2 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		_LCDMode4Bit
  4542 ;;		_LCDWriteByte
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _LCDLatchData
  4548  0E7D                     _LCDLatchData:	
  4549                           
  4550                           ;MyLCD.c: 58: RD3=1;
  4551                           
  4552                           ;incstack = 0
  4553                           ; Regs used in _LCDLatchData: [wreg]
  4554  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  4555  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  4556  0E7F  1588               	bsf	8,3	;volatile
  4557                           
  4558                           ;MyLCD.c: 59: RD3=0;
  4559  0E80  1188               	bcf	8,3	;volatile
  4560                           
  4561                           ;MyLCD.c: 60: _delay((unsigned long)((2)*(4000000/4000.0)));
  4562  0E81  3003               	movlw	3
  4563  0E82  00F1               	movwf	??_LCDLatchData+1
  4564  0E83  3097               	movlw	151
  4565  0E84  00F0               	movwf	??_LCDLatchData
  4566  0E85                     u2927:	
  4567  0E85  0BF0               	decfsz	??_LCDLatchData,f
  4568  0E86  2E85               	goto	u2927
  4569  0E87  0BF1               	decfsz	??_LCDLatchData+1,f
  4570  0E88  2E85               	goto	u2927
  4571  0E89  2E8A               	nop2
  4572  0E8A  0008               	return
  4573  0E8B                     __end_of_LCDLatchData:	
  4574  007E                     btemp	set	126	;btemp
  4575  007E                     wtemp0	set	126


Data Sizes:
    Strings     37
    Constant    40
    Data        3
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      71
    BANK1            80      0      17
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_5(CODE[11]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), LCDPrintNumber@str(COMMON[7]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    LCDPrintFNumber@str	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK1[17]), 

    LCDPrint@str	PTR unsigned char  size(2) Largest target is 17
		 -> ftoa@buf(BANK1[17]), STR_4(CODE[2]), STR_3(CODE[9]), STR_2(CODE[12]), 
		 -> LCDPrintNumber@str(COMMON[7]), 


Critical Paths under _main in COMMON

    _main->_LCDPrint
    _LCDPrintFNumber->_LCDPrint
    _ftoa->___ftmul
    _ftoa->___lltoft
    _sprintf->___lldiv
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftsub->___lltoft
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _LCDPrint->_LCDMove
    _LCDPutChar->_LCDWriteData
    _LCDWriteData->_LCDWriteByte
    _LCDMove->_LCDWriteCommand
    _LCDInit->_LCDWriteCommand
    _LCDMode4Bit->_LCDLatchData
    _LCDClear->_LCDWriteCommand
    _LCDWriteCommand->_LCDWriteByte
    _LCDWriteByte->_LCDLatchData

Critical Paths under _main in BANK0

    _main->_LCDPrintFNumber
    _LCDPrintFNumber->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___fttol->___ftmul
    ___ftsub->___ftadd

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13229
                                             63 BANK0      3     3      0
                           _LCDClear
                            _LCDInit
                           _LCDPrint
                    _LCDPrintFNumber
 ---------------------------------------------------------------------------------
 (1) _LCDPrintFNumber                                     12     7      5   11676
                                             51 BANK0     12     7      5
                           _LCDPrint
                               _ftoa
 ---------------------------------------------------------------------------------
 (2) _ftoa                                                15    10      5    9979
                                             36 BANK0     15    10      5
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             34    25      9    2272
                                             10 BANK0     26    17      9
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     265
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    1790
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             10 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    2787
                                              7 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    2614
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2100
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     242
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (2) _LCDPrint                                             5     2      3    1157
                                             13 COMMON     1     1      0
                                              0 BANK0      4     1      3
                            _LCDMove
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           1     1      0     220
                                              5 COMMON     1     1      0
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (4) _LCDWriteData                                         1     1      0     198
                                              4 COMMON     1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (3) _LCDMove                                              8     7      1     318
                                              5 COMMON     8     7      1
                    _LCDWriteCommand
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              0     0      0     198
                        _LCDMode4Bit
                    _LCDWriteCommand
 ---------------------------------------------------------------------------------
 (2) _LCDMode4Bit                                          0     0      0       0
                       _LCDLatchData
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             0     0      0     198
                    _LCDWriteCommand
 ---------------------------------------------------------------------------------
 (4) _LCDWriteCommand                                      1     1      0     198
                                              4 COMMON     1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (5) _LCDWriteByte                                         2     2      0     176
                                              2 COMMON     2     2      0
                       _LCDLatchData
 ---------------------------------------------------------------------------------
 (6) _LCDLatchData                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDClear
     _LCDWriteCommand
       _LCDWriteByte
         _LCDLatchData
   _LCDInit
     _LCDMode4Bit
       _LCDLatchData
     _LCDWriteCommand
       _LCDWriteByte
         _LCDLatchData
   _LCDPrint
     _LCDMove
       _LCDWriteCommand
         _LCDWriteByte
           _LCDLatchData
     _LCDPutChar
       _LCDWriteData
         _LCDWriteByte
           _LCDLatchData
   _LCDPrintFNumber
     _LCDPrint
       _LCDMove
         _LCDWriteCommand
           _LCDWriteByte
             _LCDLatchData
       _LCDPutChar
         _LCDWriteData
           _LCDWriteByte
             _LCDLatchData
     _ftoa
       ___ftge
       ___ftmul
         ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _sprintf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      11       7       21.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     42      47       5       88.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      66      12        0.0%
ABS                  0      0      66       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Nov 01 07:57:50 2017

                       pc 0002               __CFG_CP$OFF 0000               ?_LCDPutChar 0070  
                      fsr 0004       ___wmul@multiplicand 0072              ___ftadd@exp1 0026  
            ___ftadd@exp2 0025              ___ftadd@sign 0024                       l122 0642  
                     l124 0623                       l125 067D                       l119 0621  
                     l137 0725                       l405 018F                       l237 000F  
                     l406 0197                       l429 04FB                       l398 017A  
                     l497 02AE                       _RD2 0042                       _RD3 0043  
                     _RD4 0044                       _RD5 0045                       _RD6 0046  
                     _RD7 0047              __CFG_CPD$OFF 0000                       _adc 0065  
                     fsr0 0004                       indf 0000              __CFG_FOSC$HS 0000  
         __end_of_LCDInit 0EB7              __CFG_LVP$OFF 0000           __end_of_LCDMove 0ED7  
                    l1220 022D                      l1212 01F5                      l1230 0153  
                    l1216 020B                      l1240 017F                      l1232 015F  
                    l1304 0492                      l1218 021C                      l1242 0189  
                    l1234 0164                      l1226 014C                      l1322 04C1  
                    l1340 050D                      l1324 04CD                      l1316 04AC  
                    l1334 04EB                      l1326 04D2                      l1270 0E97  
                    l1422 0596                      l1430 05D0                      l1344 051F  
                    l1336 04F7                      l1328 04D6                      l1512 0754  
                    l1440 05E2                      l1416 0581                      l1602 0427  
                    l1354 0542                      l1522 0771                      l1514 0758  
                    l1442 061C                      l1364 0036                      l1276 0007  
                    l1516 075C                      l1508 0735                      l1550 0FF1  
                    l1294 047C                      l1374 006E                      l1366 0046  
                    l1390 0F6F                      l1534 0780                      l1454 0656  
                    l1446 0625                      l1702 0301                      l1624 0EE0  
                    l1472 06A1                      l1536 0561                      l1546 0FCA  
                    l1298 0483                      l1634 0254                      l1378 007B  
                    l1394 0F8D                      l1490 06F3                      l1538 07DC  
                    l1730 0100                      l1660 02A3                      l1652 0286  
                    l1388 0F5F                      l1484 06B7                      l1468 068F  
                    l1590 03FF                      l1574 03B0                      l1662 02B1  
                    l1654 0296                      l1398 0F9A                      l1494 070B  
                    l1478 06B1                      l1750 0137                      l1568 039A  
                    l1690 0F30                      l1586 03EF                      l1666 02BF  
                    l1674 0EFC                      l1738 0112                      l1676 0F0E  
                    l1598 0417                      l1768 00CB                      STR_1 0858  
                    STR_2 0838                      STR_3 084F                      STR_4 085B  
                    STR_5 0844                      u2025 04D7                      u1500 01D0  
                    u2125 003A                      u2055 04EC                      u2215 0F7D  
                    u2145 0048                      u2225 0F8E                      u1530 01E1  
                    u1514 01D3                      u2155 005D                      u1620 0219  
                    u1525 01D6                      u2245 0EBD                      u2165 006F  
                    u2405 0702                      u1470 01BF                      u1615 020E  
                    u2415 071C                      u1560 01F2                      u1544 01E4  
                    u1465 01B4                      u1650 022A                      u1555 01E7  
                    u2531 0FBD                      u1715 0158                      u2195 0F63  
                    u1484 01C2                      u2532 0FBE                      u1645 021F  
                    u2533 0FC3                      u2605 03CE                      u1670 0233  
                    u1590 0208                      u2534 0FC4                      u1495 01C5  
                    u2551 0FE4                      u1735 0173                      u2455 0744  
                    u2375 06BA                      u2552 0FE5                      u1585 01FD  
                    u2553 0FEA                      u2385 06E9                      u2554 0FEB  
                    u1755 0182                      u2635 0400                      u1684 0236  
                    u2645 0408                      u2805 02A5                      u1845 0010  
                    u1855 0017                      u2495 0796                      u2745 025B  
                    u1795 019E                      u2595 03BC                      u2835 0F01  
                    u2685 0428                      u1965 04AD                      u2917 008C  
                    u2927 0E85                      u2695 0430                      u2775 0287  
                    u1995 04C2              __CFG_WRT$OFF 0000                      _Volt 0062  
                    _main 0084                      _ftoa 02C8              ___ftpack@arg 0070  
            ___ftpack@exp 0073                      btemp 007E             __CFG_BOREN$ON 0000  
                    start 0000            ??_LCDLatchData 0070              ___ftmul@cntr 0028  
            ___ftmul@sign 0029          __end_of_LCDClear 0E4A              ___fttol@exp1 0037  
            ___fttol@lval 0033             ?_LCDWriteData 0070             ?_LCDWriteByte 0070  
        __end_of_LCDPrint 0F55               LCDPrint@str 0021                     ?_main 0070  
                   ?_ftoa 0044           __end_of___ftadd 055A             __CFG_WDTE$OFF 0000  
         __end_of___ftneg 0E58           __end_of___lldiv 0084           __end_of___ftmul 0453  
         __end_of___llmod 0FA3           __end_of___ftsub 0EF8           __end_of___fttol 02C8  
            ___lltoft@exp 007D           __end_of_dpowers 0838           __end_of_isdigit 0E99  
           ___ftpack@sign 0074                     ftoa@f 0044                     ftoa@l 004E  
                   pclath 000A       __size_of_LCDPutChar 0006                     status 0003  
                   wtemp0 007E           __end_of_sprintf 07E1         ??_LCDWriteCommand 0074  
         _LCDPrintFNumber 00E2           __initialization 07E1              __end_of_main 00E2  
            __end_of_ftoa 0382            ??_LCDWriteData 0074            ??_LCDWriteByte 0072  
                  ??_main 005F                    ??_ftoa 0049             ___fttol@sign1 0032  
   LCDPrintFNumber@status 005A                 ??_LCDInit 0075                 ??_LCDMove 0076  
            LCDPutChar@ch 0075          ___llmod@dividend 0024          __end_of___ftpack 01B0  
        __end_of___lltoft 0F23                    _TRISD2 0442                    _TRISD3 0443  
                  _TRISD4 0444                    _TRISD5 0445                    _TRISD6 0446  
                  _TRISD7 0447            __CFG_PWRTE$OFF 0000                    ___ftge 0FA3  
                  ___wmul 0005                 ??___ftadd 0020                 ??___ftneg 0073  
               ??___lldiv 0078                 ??___ftmul 0020                 ??___llmod 0028  
               ??___ftsub 007E                 ??___fttol 002E      __size_of_LCDMode4Bit 000B  
                  ftoa@cp 0052     ___ftmul@f3_as_product 0025                 ??_isdigit 0070  
    __end_of_LCDLatchData 0E8B                 ??_sprintf 0033                 ?_LCDClear 0070  
 __end_of_LCDPrintFNumber 0144   __end_of__initialization 07FC                 ?_LCDPrint 0020  
              ___ftadd@f1 0078                ___ftadd@f2 007B                ___ftge@ff1 0070  
              ___ftge@ff2 0073                ___ftneg@f1 0070                 LCDMove@Ad 007A  
              ___ftmul@f1 0078                ___ftmul@f2 007B                ___ftsub@f1 002A  
              ___ftsub@f2 0027                ___fttol@f1 002A            __pcstackCOMMON 0070  
               LCDPrint@x 0020                 LCDPrint@y 0023              __pidataBANK0 0E42  
              ___lltoft@c 0078              ??_LCDPutChar 0075              sprintf@width 003F  
    __end_of_LCDWriteData 0E72                __pbssBANK0 0065                __pbssBANK1 00A0  
    __end_of_LCDWriteByte 023A                ??_LCDClear 0075        __end_of_LCDPutChar 0E50  
              ??_LCDPrint 007D         LCDWriteCommand@dt 0074                __pmaintext 0084  
                 ?___ftge 0070                   ?___wmul 0070                 ?___ftpack 0070  
               ?___lltoft 0078                   _LCDInit 0E99                   _LCDMove 0EB7  
         _LCDWriteCommand 0E60                __stringtab 0800          ?_LCDPrintFNumber 0053  
         __size_of___ftge 005D                   ___ftadd 0453                   ___ftneg 0E50  
                 ___lldiv 0026           __size_of___wmul 0021                   ___ftmul 0382  
                 ___llmod 0F55                   ___ftsub 0ED7                   ___fttol 023A  
              ??___ftpack 0075     __size_of_LCDLatchData 000E                ??___lltoft 007C  
                 __ptext1 00E2                   __ptext2 02C8                   __ptext3 055A  
                 __ptext4 0E8B                   __ptext5 0005                   __ptext6 0F55  
                 __ptext7 0026                   __ptext8 0EF8                   __ptext9 023A  
                 _dpowers 0810                   _isdigit 0E8B                   _sprintf 055A  
                 clrloop0 0E59      end_of_initialization 07FC                   ftoa@buf 00A0  
                 ftoa@rem 004A           ___lldiv@divisor 0070           ___lldiv@counter 007D  
            _LCDLatchData 0E7D   __end_of_LCDWriteCommand 0E69     __size_of_LCDWriteData 0009  
   __size_of_LCDWriteByte 008A         __size_of_LCDClear 0005         __size_of_LCDPrint 0032  
           ??_LCDMode4Bit 0072               ___ftmul@exp 0024       LCDPrintFNumber@fnum 0054  
          __end_of___ftge 1000            __end_of___wmul 0026              _LCDWriteData 0E69  
            _LCDWriteByte 01B0       start_initialization 07E1                ftoa@status 0047  
         ___llmod@divisor 0020           ___llmod@counter 0029                  ??___ftge 0076  
                ??___wmul 0074               __pdataBANK0 0062       __end_of_LCDMode4Bit 0E7D  
                ?_LCDInit 0070         __size_of___ftpack 006C                  ?_LCDMove 0075  
        ?_LCDWriteCommand 0070         __size_of___lltoft 002B                 ___latbits 0002  
           __pcstackBANK0 0020                  LCDMove@x 0075                  LCDMove@y 007C  
             sprintf@flag 003D               sprintf@prec 0041                  ?___ftadd 0078  
                ?___ftneg 0070                  ?___lldiv 0070                  ?___ftmul 0078  
                ?___llmod 0020                  ?___ftsub 0027                  ?___fttol 002A  
               __pstrings 0800          LCDPrintFNumber@f 0057          LCDPrintFNumber@i 005E  
        LCDPrintFNumber@x 0053          LCDPrintFNumber@y 005C                  ?_isdigit 0070  
                ?_sprintf 002A                  _LCDClear 0E45            ___wmul@product 0074  
                _LCDPrint 0F23                 clear_ram0 0E58               _LCDMode4Bit 0E72  
__size_of_LCDPrintFNumber 0062               __stringbase 080F         ___wmul@multiplier 0070  
        __size_of_LCDInit 001E          __size_of_LCDMove 0020        LCDPrintFNumber@str 005D  
        __size_of___ftadd 0107          __size_of___ftneg 0008          __size_of___lldiv 005E  
        __size_of___ftmul 00D1          __size_of___llmod 004E          __size_of___ftsub 0021  
        __size_of___fttol 008E                  ___ftpack 0144        __end_of__stringtab 0810  
                ___lltoft 0EF8               _isdigit$342 0070                sprintf@val 0039  
        __size_of_isdigit 000E                  __ptext10 0ED7                  __ptext11 0453  
                __ptext20 0E99                  __ptext12 0E50                  __ptext21 0E72  
                __ptext13 0382                  __ptext22 0E45                  __ptext14 0144  
                __ptext23 0E60                  __ptext15 0FA3                  __ptext24 01B0  
                __ptext16 0F23                  __ptext25 0E7D                  __ptext17 0E4A  
                __ptext18 0E69                  __ptext19 0EB7          __size_of_sprintf 0287  
           __size_of_main 005E             __size_of_ftoa 00BA                _LCDPutChar 0E4A  
       ??_LCDPrintFNumber 0058                  isdigit@c 0071            LCDWriteData@dt 0074  
               sprintf@ap 0038                 sprintf@sp 003E            LCDWriteByte@ch 0073  
        ___lldiv@dividend 0074                 stringcode 080A                  sprintf@c 0043  
                sprintf@f 002A          ___lldiv@quotient 0079                  stringdir 080A  
                stringtab 0800  __size_of_LCDWriteCommand 0009             ?_LCDLatchData 0070  
            ?_LCDMode4Bit 0070  
